/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package codigo;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bea
 */


public class DlgBuscadorMaterial extends javax.swing.JDialog {
 //Establecemos color de fondo
        Color fondo= new Color(222, 237, 215 );
        
        Material material=null;
    /**
     * Creates new form DlgBuscadorMate
     */
    public DlgBuscadorMaterial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        //Cambiar icono de la barra (no se ve en linux pero si en windows
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Logo.png")).getImage());
        
                //Centramos la ventana
        this.setLocationRelativeTo(null);
        
        //Pinta el formulario
        this.getContentPane().setBackground(fondo);

        //Declaración combo box:
        modeloCategoria = new DefaultComboBoxModel<>();

        //Ligar combo box al modelo:
        cmbCategoria.setModel(modeloCategoria);

        //Añadimos elementos al combo
        modeloCategoria.addElement("ELEGIR OPCIÓN");
        modeloCategoria.addElement("MONTAÑA");
        modeloCategoria.addElement("ESCALADA");
        modeloCategoria.addElement("CARRERAS");
        modeloCategoria.addElement("OTROS");

        //Declarar y ligar tabla al modelo
        modeloTabla = (DefaultTableModel) tblMaterial.getModel();
        tblMaterial.setModel(modeloTabla);

        //Recargamos la tabla
        recargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        popMnuMaterial = new javax.swing.JPopupMenu();
        mnuiRealizarPrestamo = new javax.swing.JMenuItem();
        lblMaterial = new javax.swing.JLabel();
        lblCategoria = new javax.swing.JLabel();
        txtMaterial = new javax.swing.JTextField();
        cmbCategoria = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMaterial = new javax.swing.JTable();

        mnuiRealizarPrestamo.setText("Realizar Préstamo");
        mnuiRealizarPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuiRealizarPrestamoActionPerformed(evt);
            }
        });
        popMnuMaterial.add(mnuiRealizarPrestamo);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BUSCADOR MATERIAL");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(222, 237, 215));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblMaterial.setText("MATERIAL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 50, 0, 0);
        getContentPane().add(lblMaterial, gridBagConstraints);

        lblCategoria.setText("CATEGORIA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        getContentPane().add(lblCategoria, gridBagConstraints);

        txtMaterial.setMinimumSize(new java.awt.Dimension(101, 24));
        txtMaterial.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(40, 25, 0, 0);
        getContentPane().add(txtMaterial, gridBagConstraints);

        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ELEGIR OPCIÓN", "MONTAÑA", "ESCALADA", "CARRERAS", "OTROS", " " }));
        cmbCategoria.setMinimumSize(new java.awt.Dimension(120, 24));
        cmbCategoria.setPreferredSize(new java.awt.Dimension(120, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 0, 0);
        getContentPane().add(cmbCategoria, gridBagConstraints);

        btnBuscar.setText("BUSCAR");
        btnBuscar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnBuscar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 50, 14, 50);
        getContentPane().add(btnBuscar, gridBagConstraints);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnLimpiar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 14, 50);
        getContentPane().add(btnLimpiar, gridBagConstraints);

        btnEliminar.setText("ELIMINAR");
        btnEliminar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnEliminar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 14, 50);
        getContentPane().add(btnEliminar, gridBagConstraints);

        tblMaterial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "MATERIAL", "CATEGORIA", "FECHA COMPRA", "DESCRIPCION", "UNIDADES"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMaterial.setComponentPopupMenu(popMnuMaterial);
        tblMaterial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMaterialMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMaterial);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 214;
        gridBagConstraints.ipady = 87;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 50, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        filtrar();

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiar();
        recargarTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblMaterialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMaterialMouseClicked
        // TODO add your handling code here:
        int seleccionado = tblMaterial.getSelectedRow();

        if (evt.getClickCount() == 2) {

            if (seleccionado == -1) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento");
                return;
            }

            int posiciones[] = tblMaterial.getSelectedRows();

            if (posiciones.length > 1) {
                JOptionPane.showMessageDialog(this, "Solo se puede seleccionar un elemento");
                return;
            }

            //Recuperamos el material de la lista   
            material = (Material) modeloTabla.getValueAt(seleccionado, 0);

            DlgModificarMaterial modificarMaterial = new DlgModificarMaterial(this, false, material);
            modificarMaterial.setVisible(true);

        }

    }//GEN-LAST:event_tblMaterialMouseClicked

    private void mnuiRealizarPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuiRealizarPrestamoActionPerformed
        // TODO add your handling code here:
        int seleccionado = tblMaterial.getSelectedRow();
        material = (Material) modeloTabla.getValueAt(seleccionado, 0);
        DlgRealizarPrestamo realizarPrestamo = new DlgRealizarPrestamo(this, false, material);
        realizarPrestamo.setVisible(true);
    }//GEN-LAST:event_mnuiRealizarPrestamoActionPerformed

    private void recargarTabla() {
        modeloTabla.setRowCount(0);
        try {
            Statement stmt = Conexion.getConexion().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            String consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL";
            System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
            ResultSet rs = stmt.executeQuery(consulta); //Ejecuta la consulta

            while (rs.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                int codigo = rs.getInt(1); //Primera columna
                String nombre_material = rs.getString(2); //Segunda columna
                String categoria = rs.getString(3); //Tercera columna
                String descripcion = rs.getString(4); //cuarta columna
                int unidades = rs.getInt(5); //quinta columna
                String fecha_compra = rs.getString(6); //sexta columna

                //Creamos un nuevo objeto de tipo Material
                Material material = new Material(codigo, nombre_material, categoria, fecha_compra, descripcion, unidades);

                modeloTabla.setRowCount(modeloTabla.getRowCount() + 1);

                //Añadimos el objeto "material" en la primera columna de la tabla 
                modeloTabla.setValueAt(material, modeloTabla.getRowCount() - 1, 0);

                //Rellenamos las columnas con los datos del material
                modeloTabla.setValueAt(material.getNombre(), modeloTabla.getRowCount() - 1, 1);
                modeloTabla.setValueAt(material.getCategoria(), modeloTabla.getRowCount() - 1, 2);
                modeloTabla.setValueAt(material.getFecha_compra(), modeloTabla.getRowCount() - 1, 3);
                modeloTabla.setValueAt(material.getDescripcion(), modeloTabla.getRowCount() - 1, 4);
                modeloTabla.setValueAt(material.getUnidades(), modeloTabla.getRowCount() - 1, 5);

//                //Alinear a la izquierda los datos en las columnas
//                 DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer(); //Se crea la alineación
//                 leftRenderer.setHorizontalAlignment( JLabel.LEFT );
//
//                //Se utiliza el bucle para ir añadiendo la alineación
//                 for(int x=0;x<8;x++){
//                 tblMaterial.getColumnModel().getColumn(x).setCellRenderer( leftRenderer );
//                 }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error actualizando tabla");
            dispose();
        }
    }

    private void filtrar() {
        String material_nombre = txtMaterial.getText().trim();

        int indice = cmbCategoria.getSelectedIndex();
        String categoria_material = modeloCategoria.getElementAt(indice);

        String consulta = "";

        modeloTabla.setRowCount(0);// Eliminamos los registros de la tabla para no duplicar datos al recuperarlos

        try {
            //Se establece la conexión
            Statement stmt = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta

            //FILTROS COMBO "vacio" Y CAJA DE TEXTO NO VACIA
            if (categoria_material == "ELEGIR OPCIÓN") {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE NOMBRE LIKE '%"+material_nombre+"%'";
                System.out.println(consulta);
            }

            //FILTROS DIFERENTES OPCIONES DEL COMBO Y CAJA DE TEXTO VACIA
            if (categoria_material == "MONTAÑA" && material_nombre.isEmpty()) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE CATEGORIA ='" + categoria_material + "'";
                System.out.println(consulta);
            }

            if (categoria_material == "ESCALADA" && material_nombre.isEmpty()) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE CATEGORIA ='" + categoria_material + "'";
                System.out.println(consulta);
            }

            if (categoria_material == "CARRERAS" && material_nombre.isEmpty()) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE CATEGORIA ='" + categoria_material + "'";
                System.out.println(consulta);
            }

            if (categoria_material == "OTROS" && material_nombre.isEmpty()) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE CATEGORIA ='" + categoria_material + "'";
                System.out.println(consulta);
            }

            //FILTROS DIFERENTES OPCIONES DEL COMPO Y CAJA DE TEXTO NO VACIA
            if (categoria_material == "MONTAÑA"&& material_nombre.isEmpty()==false) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE NOMBRE LIKE '%"+material_nombre+"%' AND CATEGORIA='" + categoria_material + "'";
                System.out.println(consulta);
            }

            if (categoria_material == "ESCALADA"&& material_nombre.isEmpty()==false) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE NOMBRE LIKE '%"+material_nombre+"%' AND CATEGORIA='" + categoria_material + "'";
                System.out.println(consulta);
            }

            if (categoria_material == "CARRERAS"&& material_nombre.isEmpty()==false) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE NOMBRE LIKE '%"+material_nombre+"%' AND CATEGORIA='" + categoria_material + "'";
                System.out.println(consulta);
            }

            if (categoria_material == "OTROS"&& material_nombre.isEmpty()==false) {
                consulta = "SELECT CODIGO,NOMBRE,CATEGORIA,DESCRIPCION, UNIDADES, FECHA_COMPRA FROM MATERIAL WHERE NOMBRE LIKE '%"+material_nombre+"%' AND CATEGORIA='" + categoria_material + "'";
                System.out.println(consulta);
            }

            ResultSet resultSet = stmt.executeQuery(consulta); //Ejecuta la consulta
            
              //Creamos una variable que recoja el número de filas del resultado del rs
                int filas = resultSet.getRow();

                //Lanzamos un mensaje de aviso
                if (filas == 0 && resultSet.next() == false) {
                    System.out.println(filas);
                    JOptionPane.showMessageDialog(this, "No hay ningún material que cumpla con esos parámetros");
                    return;
                }

                //Nos ponemos antes del primero
                resultSet.beforeFirst();
                
            while (resultSet.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                int codigo = resultSet.getInt(1); //Primera columna
                String nombre_material = resultSet.getString(2); //Segunda columna
                String categoria = resultSet.getString(3); //Tercera columna
                String descripcion = resultSet.getString(4);
                int unidades = resultSet.getInt(5);
                String fecha_compra = resultSet.getString(6);

                //Creamos el material 
                Material material = new Material(codigo, nombre_material, categoria, fecha_compra, descripcion, unidades);
                //Meto en el modelo

                modeloTabla.setRowCount(modeloTabla.getRowCount() + 1);

                //Añadir objeto completo en la primera celda
                modeloTabla.setValueAt(material, modeloTabla.getRowCount() - 1, 0);
                //Llenamos las diferentes columnas

                modeloTabla.setValueAt(material.getNombre(), modeloTabla.getRowCount() - 1, 1);
                modeloTabla.setValueAt(material.getCategoria(), modeloTabla.getRowCount() - 1, 2);
                modeloTabla.setValueAt(material.getFecha_compra(), modeloTabla.getRowCount() - 1, 3);
                modeloTabla.setValueAt(material.getDescripcion(), modeloTabla.getRowCount() - 1, 4);
                modeloTabla.setValueAt(material.getUnidades(), modeloTabla.getRowCount() - 1, 5);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error filtrando en la tabla");
        }

    }

    private void limpiar() {
        txtMaterial.setText("");
        int indice = cmbCategoria.getSelectedIndex();
        cmbCategoria.setSelectedItem(1);
    }

    private boolean sePuedeEliminar(Material material) {

        try {
            Statement stmt = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            String consulta = "SELECT CODIGO_MATERIAL FROM PRESTAMO_MATERIAL WHERE CODIGO_MATERIAL=" + material.getCodigo();
            System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
            ResultSet rs = stmt.executeQuery(consulta); //Ejecuta la consulta

            while (!rs.next()) { //Recorrer fila a fila mientras existan datos

                return true;
            }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error comprobando si se puede eliminar el comic");
        }

        return false;
    }


    private void eliminar() {
        int posiciones[] = tblMaterial.getSelectedRows();

        if (posiciones.length == 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento");
            return;
        }

        //Recuperamos el material de la tabla del buscador
        for (int i = 0; i < posiciones.length; i++) {

            Material material = (Material) modeloTabla.getValueAt(posiciones[i], 0);
            
             if(sePuedeEliminar(material)==false){
               JOptionPane.showMessageDialog(this,"No se puede eliminar "+material.getNombre()+" porque existe uno o varios préstamos asociados a este material.");
               return;
           }

            //Lanzamos la consulta de eliminar
            try { //Insert,delete,modify
                Statement statement = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
                String consulta = "DELETE FROM MATERIAL WHERE CODIGO=" + material.getCodigo();
                System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
                statement.executeUpdate(consulta); //Ejecuta la consulta en la BD

//Una vez eleminado uno o varios elementos recarga la tabla entera sin aplicarle filtrado en caso de que lo tuviese
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error eliminando datos");
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Elemento eliminado correctamente");
        recargarTabla();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgBuscadorMaterial dialog = new DlgBuscadorMaterial(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cmbCategoria;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblMaterial;
    private javax.swing.JMenuItem mnuiRealizarPrestamo;
    private javax.swing.JPopupMenu popMnuMaterial;
    public static javax.swing.JTable tblMaterial;
    private javax.swing.JTextField txtMaterial;
    // End of variables declaration//GEN-END:variables
    
    //Declaramos la tabla y el combo
    private DefaultComboBoxModel<String> modeloCategoria;
    public static DefaultTableModel modeloTabla;
}
