/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package codigo;


import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bea
 */
public class DlgDevoluciones extends javax.swing.JDialog {
     //Establecemos color de fondo
        Color fondo= new Color(222, 237, 215 );
        
        int limite=9;

    /**
     * Creates new form DlgDevoluciones
     */
    public DlgDevoluciones(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
                 //Pinta el formulario
        this.getContentPane().setBackground(fondo);
                //Cambiar icono de la barra (no se ve en linux pero si en windows
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Logo.png")).getImage());
        //Centramos la ventana
        this.setLocationRelativeTo(null);
        
        //Decarar y ligar tabla al modelo
        modeloTablaDevoluciones = (DefaultTableModel) tblDevoluciones.getModel();
        tblDevoluciones.setModel(modeloTablaDevoluciones);
        
        
        //Recargamos la tabla
        recargarTabla();
        
        comprobarDNI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        txtCodSocio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        txtCodMaterial = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        ScrollTabla = new javax.swing.JScrollPane();
        tblDevoluciones = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DEVOLUCIONES");
        setBackground(new java.awt.Color(222, 237, 215));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("CODIGO SOCIO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(30, 50, 4, 0);
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(30, 20, 0, 70);
        getContentPane().add(txtCodSocio, gridBagConstraints);

        jLabel2.setText("DNI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 4, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("CODIGO MATERIAL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 4, 0);
        getContentPane().add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 70);
        getContentPane().add(txtDni, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 70);
        getContentPane().add(txtCodMaterial, gridBagConstraints);

        btnBuscar.setText("BUSCAR");
        btnBuscar.setMaximumSize(new java.awt.Dimension(109, 35));
        btnBuscar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnBuscar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 70);
        getContentPane().add(btnBuscar, gridBagConstraints);

        tblDevoluciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID PRESTAMO", "SOCIO", "MATERIAL", "FECHA INICIO", "FECHA DEVOLUCION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollTabla.setViewportView(tblDevoluciones);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(30, 50, 30, 0);
        getContentPane().add(ScrollTabla, gridBagConstraints);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnLimpiar.setPreferredSize(new java.awt.Dimension(109, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 70);
        getContentPane().add(btnLimpiar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        filtrar();
    }//GEN-LAST:event_btnBuscarActionPerformed

        private void limpiar(){
        txtDni.setText("");
        txtCodMaterial.setText("");
        txtCodMaterial.setText("");
       
    }
        
        private void comprobarDNI() {
        //Metodo para que la caja de texto de dni no deje insertar más de 9 digitos. 
        JTextField txtDNI = this.txtDni;
        txtDNI.addKeyListener(new KeyListener() {
            //keyTyped(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla, pero solo cuando la tecla corresponde a caractéres, teclas especiales como F1, F2 entre otras no son identificadas.
            public void keyTyped(KeyEvent e) {
                if (txtDNI.getText().length() == limite) {
                    e.consume();
                }
            }

            @Override
            //keyPressed(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla.
            public void keyPressed(KeyEvent ke) {
            }

            //keyReleased(KeyEvent e): Se ejecuta cuando el usuario libera una tecla
            @Override
            public void keyReleased(KeyEvent ke) {
            }

        });
    }
        
    private void recargarTabla(){
         
        modeloTablaDevoluciones.setRowCount(0);
        try {
            Statement statement = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            String consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE PRESTAMO_MATERIAL.DEVUELTO=1";

                     System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
            ResultSet resultSet = statement.executeQuery(consulta); //Ejecuta la consulta
            int codigo_material = 0;
            int num_socio = 0;
            while (resultSet.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                int id_prestamo = resultSet.getInt(1);
                num_socio = resultSet.getInt(2); //Primera columna
                codigo_material= resultSet.getInt(3);              
                String fecha_prestamo = resultSet.getString(4);
                String fecha_limite = resultSet.getString(5);
                String fecha_devolucion = resultSet.getString(6);      
                boolean devuelto = resultSet.getBoolean(7);  
                                        
         
                //Creo nuevo prestamo
                Prestamo prestamo= new Prestamo(id_prestamo, codigo_material, num_socio, fecha_prestamo, fecha_limite, fecha_devolucion, devuelto);

                //Meto en el modelo                
                modeloTablaDevoluciones.setRowCount(modeloTablaDevoluciones.getRowCount() + 1);

                //Añadir objeto completo en la primera celda
                modeloTablaDevoluciones.setValueAt(prestamo, modeloTablaDevoluciones.getRowCount() - 1, 0);

                //Llenamos las diferentes columnas                                
                modeloTablaDevoluciones.setValueAt(prestamo.getNum_socio(), modeloTablaDevoluciones.getRowCount() - 1, 1);
                modeloTablaDevoluciones.setValueAt(prestamo.getCodigo_material(), modeloTablaDevoluciones.getRowCount() - 1, 2);
                modeloTablaDevoluciones.setValueAt(prestamo.getFecha_prestamo(), modeloTablaDevoluciones.getRowCount() - 1, 3);
                modeloTablaDevoluciones.setValueAt(prestamo.getFecha_devolucion(), modeloTablaDevoluciones.getRowCount() - 1, 4);
               
                //FECHA DEVOLUCIÓN ---> CAMBIAR POR DÍAS RESTANTES ( FECHA INICIO - FECHA LIMITE = DIAS) 

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error actualizando tabla");
            e.printStackTrace();
            dispose();
        }
    
    }
    
    private void filtrar() {
        String cod_socio = txtCodSocio.getText().trim();      
        String cod_material = txtCodMaterial.getText().trim();
        String dni = txtDni.getText().trim();   
        String consulta = "";

        modeloTablaDevoluciones.setRowCount(0);// Eliminamos los registros de la tabla para no duplicar datos al recuperarlos

        try {
            //Se establece la conexión
            Statement statement = Conexion.getConexion().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta

            //FILTRO CODIGO SOCIO && CODIGO MATERIAL && DNI 
            if (cod_socio.isEmpty()==false && cod_material.isEmpty()==false && dni.isEmpty()==false) {
                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE PRESTAMO_MATERIAL.DEVUELTO=1";
                System.out.println(consulta);
            }

            //FILTRO CODIGO SOCIO && CODIGO MATERIAL
            if (dni.isEmpty()) {
                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE SOCIO.NUM_SOCIO LIKE '%"+cod_socio+"%' AND PRESTAMO_MATERIAL.CODIGO_MATERIAL LIKE '%"+cod_material+"' AND PRESTAMO_MATERIAL.DEVUELTO=1";
           
                System.out.println(consulta);
            }

            //FILTRO CODIGO SOCIO
            if (cod_material.isEmpty()&&dni.isEmpty()) {
                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE SOCIO.NUM_SOCIO LIKE '%"+cod_socio+"%' AND PRESTAMO_MATERIAL.DEVUELTO=1";
                System.out.println(consulta);
            }
            
            //FILTROS VACIOS = RECARGAR TABLA 
            

//FILTRO CODIGO SOCIO && DNI
            if (cod_material.isEmpty() && cod_socio.isEmpty()==false && dni.isEmpty()==false) {
                consulta ="SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE DNI="+dni+" AND SOCIO.NUM_SOCIO LIKE '%"+cod_socio+"%' AND PRESTAMO_MATERIAL.DEVUELTO=1";
                System.out.println(consulta);
            }
            //FILTRO CODIGO MATERIAL

            if (cod_socio.isEmpty()&&dni.isEmpty()) {
                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE PRESTAMO_MATERIAL.CODIGO_MATERIAL LIKE '%"+cod_material+"' AND PRESTAMO_MATERIAL.DEVUELTO=1";
                System.out.println(consulta);
            }
            
             //FILTRO CODIGO MATERIAL && dni
            if (cod_socio.isEmpty() && dni.isEmpty()==false && cod_material.isEmpty()==false) {
                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n"
                        + "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n"
                        + "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE DNI=" + dni + " AND PRESTAMO_MATERIAL.CODIGO_MATERIAL LIKE '%" + cod_material + "%' AND PRESTAMO_MATERIAL.DEVUELTO=1";
                System.out.println(consulta);
            }

//            
//            //FILTRO DNI
//
            if (cod_socio.isEmpty() && cod_material.isEmpty() && dni.isEmpty()==false) {
                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n"
                        + "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n"
                        + "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE DNI="+ dni + " AND PRESTAMO_MATERIAL.DEVUELTO=1";
                System.out.println(consulta);
            }

            if(consulta!=null){
            
            ResultSet resultSet = statement.executeQuery(consulta); //Ejecuta la consulta
            
              //Creamos una variable que recoja el número de filas del resultado del rs
                int filas = resultSet.getRow();

                //Lanzamos un mensaje de aviso
                if (filas == 0 && resultSet.next() == false) {
                    System.out.println(filas);
                    JOptionPane.showMessageDialog(this, "No hay ninguna devolución que cumpla con esos parámetros");
                    return;
                }

                //Nos ponemos antes del primero
                resultSet.beforeFirst();
                
    
            while (resultSet.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                int id_prestamo = resultSet.getInt(1);
                int codigo_socio = resultSet.getInt(2); //Primera columna
                int codigo_material= resultSet.getInt(3);              
                String fecha_prestamo = resultSet.getString(4);
                String fecha_limite = resultSet.getString(5);
                String fecha_devolucion = resultSet.getString(6);      
                boolean devuelto = resultSet.getBoolean(7);  
                                        
         
                //Creo nuevo prestamo
                Prestamo prestamo= new Prestamo(id_prestamo, codigo_material, codigo_socio, fecha_prestamo, fecha_limite, fecha_devolucion, devuelto);

                //Meto en el modelo                
                modeloTablaDevoluciones.setRowCount(modeloTablaDevoluciones.getRowCount() + 1);

                //Añadir objeto completo en la primera celda
                    modeloTablaDevoluciones.setValueAt(prestamo, modeloTablaDevoluciones.getRowCount() - 1, 0);

                    //Llenamos las diferentes columnas                                
                    modeloTablaDevoluciones.setValueAt(prestamo.getNum_socio(), modeloTablaDevoluciones.getRowCount() - 1, 1);
                    modeloTablaDevoluciones.setValueAt(prestamo.getCodigo_material(), modeloTablaDevoluciones.getRowCount() - 1, 2);
                    modeloTablaDevoluciones.setValueAt(prestamo.getFecha_prestamo(), modeloTablaDevoluciones.getRowCount() - 1, 3);
                    modeloTablaDevoluciones.setValueAt(prestamo.getFecha_devolucion(), modeloTablaDevoluciones.getRowCount() - 1, 4);

                }

            } else {
                recargarTabla();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error filtrando en la tabla");
            e.printStackTrace();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgDevoluciones dialog = new DlgDevoluciones(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollTabla;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTable tblDevoluciones;
    private javax.swing.JTextField txtCodMaterial;
    private javax.swing.JTextField txtCodSocio;
    private javax.swing.JTextField txtDni;
    // End of variables declaration//GEN-END:variables
    public static DefaultTableModel modeloTablaDevoluciones;
}
