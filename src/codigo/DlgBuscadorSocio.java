/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package codigo;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bea
 */
public class DlgBuscadorSocio extends javax.swing.JDialog {
 //Establecemos color de fondo
        Color fondo= new Color(222, 237, 215 );
    
    /**
     * Creates new form DlgBuscadorMate
     */
        
        JuntaDirectiva juntaDirectiva=null;
    public DlgBuscadorSocio(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //Cambiar icono de la barra (no se ve en linux pero si en windows
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Logo.png")).getImage());
                //Pinta el formulario
        this.getContentPane().setBackground(fondo);
        
                //Centramos la ventana
        this.setLocationRelativeTo(null);
        
        //Decarar y ligar tabla al modelo
        modeloTablaSocios = (DefaultTableModel) tblSocios.getModel();
        tblSocios.setModel(modeloTablaSocios);
        
        
        //Recargamos la tabla
        recargarTabla();
        
         //Ocultamos la columna del ID para que no se vea
                tblSocios.getColumnModel().getColumn(0).setMaxWidth(0);
                tblSocios.getColumnModel().getColumn(0).setMinWidth(0);
                tblSocios.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(0);
                tblSocios.getTableHeader().getColumnModel().getColumn(0).setMinWidth(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        DNI = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSocios = new javax.swing.JTable();
        txtDni = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BUSCADOR SOCIO");
        setBackground(new java.awt.Color(222, 237, 215));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        DNI.setText("DNI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 0, 0);
        getContentPane().add(DNI, gridBagConstraints);

        btnBuscar.setText("BUSCAR");
        btnBuscar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnBuscar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 10, 40);
        getContentPane().add(btnBuscar, gridBagConstraints);

        tblSocios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NUM_SOCIO", "DNI", "NOMBRE", "APELLIDO", "EMAIL", "FECHA NACIMIENTO", "DIRECCIÓN", "TELÉFONO", "CARGO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSocios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSociosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSocios);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 214;
        gridBagConstraints.ipady = 87;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 50, 20);
        getContentPane().add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(50, 20, 0, 20);
        getContentPane().add(txtDni, gridBagConstraints);

        lblNombre.setText("NOMBRE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 0);
        getContentPane().add(lblNombre, gridBagConstraints);

        lblApellido.setText("APELLIDO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 40, 0);
        getContentPane().add(lblApellido, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        getContentPane().add(txtNombre, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 40, 20);
        getContentPane().add(txtApellido, gridBagConstraints);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnLimpiar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 40);
        getContentPane().add(btnLimpiar, gridBagConstraints);

        btnEliminar.setText("ELIMINAR");
        btnEliminar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnEliminar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 40);
        getContentPane().add(btnEliminar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        filtrar();
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiar();
        recargarTabla();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblSociosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSociosMouseClicked
        // TODO add your handling code here:
        int seleccionado =tblSocios.getSelectedRow();
         
        if(evt.getClickCount()==2)
        {          
           
            if(seleccionado==-1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento");
            return;
            }
           
            int posiciones[]=tblSocios.getSelectedRows();
            
            if(posiciones.length>1){
            JOptionPane.showMessageDialog(this, "Solo se puede seleccionar un elemento");
            return;
            }

        //Recuperamos el socio de la tala

        Socio socio = (Socio) modeloTablaSocios.getValueAt(seleccionado, 0);
        
        JuntaDirectiva juntaDirectiva = (JuntaDirectiva)modeloTablaSocios.getValueAt(seleccionado, 8);
    
            DlgModificarSocio modificarSocio = new DlgModificarSocio(this, false, socio, juntaDirectiva);
            modificarSocio.setVisible(true);

        }
    }//GEN-LAST:event_tblSociosMouseClicked

    
    private void recargarTabla(){
        modeloTablaSocios.setRowCount(0);
        try {
            Statement statement = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            String consulta = "SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO, JUNTA_DIRECTIVA.USUARIO_APP, JUNTA_DIRECTIVA.CONTRASEÑA FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO";

            System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
            ResultSet resultSet = statement.executeQuery(consulta); //Ejecuta la consulta
            int junta = 0;
            int num_socio = 0;
            while (resultSet.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                num_socio = resultSet.getInt(1); //Primera columna
                String dni = resultSet.getString(2); //Segunda columna
                String nombre = resultSet.getString(3); //Tercera columna
                String apellido = resultSet.getString(4);
                String fecha_nacimiento = resultSet.getString(5);
                String direccion = resultSet.getString(6);
                int telefono = resultSet.getInt(7);
                String email = resultSet.getString(8);
                int junta_directiva = resultSet.getInt(9);
                
                String cargo_junta = resultSet.getString(10);
                String usuario_app = resultSet.getString(11);
                String contraseña = resultSet.getString(12);
                                        
              
                if (junta_directiva == 0) {
                    cargo_junta = "SIN CARGO";
                }
                
                    
                //Creo socio y miembro de la junta directiva
                Socio socio = new Socio(num_socio, dni, nombre, apellido, email, fecha_nacimiento, telefono, direccion, junta_directiva);
                juntaDirectiva = new JuntaDirectiva(usuario_app, contraseña, cargo_junta);

                //Meto en el modelo                
                modeloTablaSocios.setRowCount(modeloTablaSocios.getRowCount() + 1);

                //Añadir objeto completo en la primera celda
                modeloTablaSocios.setValueAt(socio, modeloTablaSocios.getRowCount() - 1, 0);
//                modeloTablaSocios.setValueAt(socio.getNum_socio(), modeloTablaSocios.getRowCount() - 1, 1);

                //Llenamos las diferentes columnas                                
                modeloTablaSocios.setValueAt(socio.getDni(), modeloTablaSocios.getRowCount() - 1, 1);
                modeloTablaSocios.setValueAt(socio.getNombre(), modeloTablaSocios.getRowCount() - 1, 2);
                modeloTablaSocios.setValueAt(socio.getApellido(), modeloTablaSocios.getRowCount() - 1, 3);
                modeloTablaSocios.setValueAt(socio.getEmail(), modeloTablaSocios.getRowCount() - 1, 4);
                modeloTablaSocios.setValueAt(socio.getFecha_nacimiento(), modeloTablaSocios.getRowCount() - 1, 5);
                modeloTablaSocios.setValueAt(socio.getDireccion(), modeloTablaSocios.getRowCount() - 1, 6);
                modeloTablaSocios.setValueAt(socio.getTelefono(), modeloTablaSocios.getRowCount() - 1, 7);
                modeloTablaSocios.setValueAt(juntaDirectiva, modeloTablaSocios.getRowCount() - 1, 8);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error actualizando tabla");
            e.printStackTrace();
            dispose();
        }
    }
        
    private void filtrar() {
        String dni = txtDni.getText().trim().toUpperCase();
        String nombre = txtNombre.getText().trim().toUpperCase();
        String apellido = txtApellido.getText().trim().toUpperCase();
        
        String consulta=null;
        
        modeloTablaSocios.setRowCount(0);// Primero borramos los elementos de la tabla para que al darle a recuperar varias veces no duplique los datos
        
        try {
            //Se establece la conexión
            Statement stmt = Conexion.getConexion().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            

            //FILTROS
            //DNI VACIO, NOMBRE VACIO, APELLIDOS VACIO - Buscar todos los socios
//            if(dni.isEmpty()&&nombre.isEmpty()&&apellido.isEmpty()){
//                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO";
//            }
//            
            //DNI NO VACIO, NOMBRE NO VACIO, APELLIDO NO VACIO - Buscar por dni, nombre y apellido
            
            if(dni.isEmpty()==false && nombre.isEmpty()==false && apellido.isEmpty()==false){
                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO WHERE DNI='"+dni+"' AND NOMBRE LIKE'%"+nombre+"%' AND APELLIDO LIKE'%"+apellido+"%'";
            }    
            
            //NOMBRE VACIO, DNI NO VACIo, APELLIDO NO VACIO - Buscar por apellido y dni
            if(dni.isEmpty()==false && nombre.isEmpty() && apellido.isEmpty()==false){
                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO WHERE DNI='"+dni+"' AND APELLIDO LIKE'%"+apellido+"%'";
            }
            
            //DNI NO VACIO, NOMBRE NO VACIO, APELLIDO VACIO - Buscar por nombre y dni    
            if(apellido.isEmpty() && dni.isEmpty()==false && nombre.isEmpty()==false){
                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO WHERE DNI='"+dni+"' AND NOMBRE LIKE'%"+nombre+"%'";

            }
           
            //NOMBRE NO VACIO, APELLLIDO NO VACIO, DNI VACIO - Buscar por nombre y apellido
            if(dni.isEmpty() && nombre.isEmpty()==false && apellido.isEmpty()==false){
                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO WHERE NOMBRE LIKE '%"+nombre+"%' AND APELLIDO LIKE '%"+apellido+"%'";            
            }
                
            //DNI NO VACIO, NOMBRE VACIO, APELLIDO VACIO -- buscar por dni
            if(apellido.isEmpty()&& nombre.isEmpty() && dni.isEmpty()==false){
                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO WHERE DNI='"+dni+"'";
            }
            
            //APELLIDO NO VACIO, NOMBRE VACIO, DNI VACIO - Buscar por apellido
            if(dni.isEmpty() && nombre.isEmpty() && apellido.isEmpty()==false){
                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO WHERE APELLIDO LIKE '%"+apellido+"%'";            
            }
            
            //APELLIDO VACIO, NOMBRE NO VACIO, DNI VACIO - Buscar por nombre
            if(nombre.isEmpty() == false && apellido.isEmpty() && dni.isEmpty()){
                consulta="SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO WHERE NOMBRE LIKE '%"+nombre+"%'";            
            }
            
            System.out.println(consulta);
            if (consulta != null) {

                ResultSet resultSet = stmt.executeQuery(consulta); //Ejecuta la consulta

                //Creamos una variable que recoja el número de filas del resultado del rs
                int filas = resultSet.getRow();

                //Lanzamos un mensaje de aviso
                if (filas == 0 && resultSet.next() == false) {
                    System.out.println(filas);
                    JOptionPane.showMessageDialog(this, "No hay ningún socio que cumpla con esos parámetros");
                    return;
                }

                //Nos ponemos antes del primero
                resultSet.beforeFirst();

                while (resultSet.next()) { //Recorrer fila a fila mientras existan datos
                    int num_socio = resultSet.getInt(1); //Primera columna
                    String dni_socio = resultSet.getString(2); //Segunda columna
                    String nombre_socio = resultSet.getString(3); //Tercera columna
                    String apellido_socio = resultSet.getString(4);
                    String fecha_nacimiento = resultSet.getString(5);
                    String direccion = resultSet.getString(6);
                int telefono = resultSet.getInt(7);
                String email = resultSet.getString(8);

                int junta_directiva = resultSet.getInt(9);
                
               String cargo_junta = resultSet.getString(10);
                
                if (junta_directiva == 0) {
                    cargo_junta = "SIN CARGO";
                }
                
               

                //Creo socio y miembro de la junta directiva
                Socio socio = new Socio(num_socio, dni_socio, nombre_socio, apellido_socio, email, fecha_nacimiento, telefono, direccion, junta_directiva);

                //Meto en el modelo                
                modeloTablaSocios.setRowCount(modeloTablaSocios.getRowCount() + 1);

                                //Añadir objeto completo en la primera celda
                modeloTablaSocios.setValueAt(socio, modeloTablaSocios.getRowCount() - 1, 0);
//              modeloTablaSocios.setValueAt(socio.getNum_socio(), modeloTablaSocios.getRowCount() - 1, 1);

                //Llenamos las diferentes columnas                                
                modeloTablaSocios.setValueAt(socio.getDni(), modeloTablaSocios.getRowCount() - 1, 1);
                modeloTablaSocios.setValueAt(socio.getNombre(), modeloTablaSocios.getRowCount() - 1, 2);
                modeloTablaSocios.setValueAt(socio.getApellido(), modeloTablaSocios.getRowCount() - 1, 3);
                modeloTablaSocios.setValueAt(socio.getEmail(), modeloTablaSocios.getRowCount() - 1, 4);
                modeloTablaSocios.setValueAt(socio.getFecha_nacimiento(), modeloTablaSocios.getRowCount() - 1, 5);
                modeloTablaSocios.setValueAt(socio.getDireccion(), modeloTablaSocios.getRowCount() - 1, 6);
                modeloTablaSocios.setValueAt(socio.getTelefono(), modeloTablaSocios.getRowCount() - 1, 7);
                modeloTablaSocios.setValueAt(cargo_junta, modeloTablaSocios.getRowCount() - 1, 8);
                
               

             }
            } else{
                recargarTabla();
            }
            
        }catch(SQLException e){
             JOptionPane.showMessageDialog(this,"Error filtrando en la tabla");
             e.printStackTrace();
        }
    
                
    }
    
    
    private void limpiar(){
        txtDni.setText("");
        txtNombre.setText("");
        txtApellido.setText("");
       
    }
    
        private boolean sePuedeEliminar(Socio socio){
        
        
         try{ 
            Statement stmt=Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            String consulta="SELECT NUM_SOCIO FROM PRESTAMO_MATERIAL WHERE NUM_SOCIO="+socio.getNum_socio();
            System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
            ResultSet resultSet=stmt.executeQuery(consulta); //Ejecuta la consulta
            
            
            while(!resultSet.next()){ //Recorrer fila a fila mientras existan datos
                
               return true;
            
            }
         }catch(SQLException e){
             JOptionPane.showMessageDialog(this,"Error comprobando si se puede eliminar el socio");
         }
        
                return false; 
                 
        
    }
    
    private void eliminar(){
        int posiciones [] =tblSocios.getSelectedRows();
         
        if (posiciones.length == 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento");
            return;
        }

        //Recuperamos el socio de la tabla
        for (int i = 0; i < posiciones.length; i++) {

            Socio socio = (Socio) modeloTablaSocios.getValueAt(posiciones[i], 0);

            if (sePuedeEliminar(socio) == false) {
                JOptionPane.showMessageDialog(this, "No se puede eliminar el socio " + socio.getDni() + " - " + socio.getNombre() + " porque existe un préstamo asociado a dicho socio.");
                return;
            }

            if (juntaDirectiva.getUsuario_app().equals(FrmPrincipal.mnuUsuario.getText().toLowerCase())) {
                JOptionPane.showMessageDialog(this, "No se puede eliminar el socio con la sesión iniciada");
                return;
            }
            //Lanzamos la consulta de eliminar 
            String consulta2 = "";
            try { //Insert,delete,modify

                Statement statement = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
                String consulta_junta = "SELECT NUM_SOCIO FROM JUNTA_DIRECTIVA WHERE NUM_SOCIO='" + socio.getNum_socio() + "'";
                String consulta = "DELETE FROM SOCIO WHERE DNI='" + socio.getDni() + "'";

                ResultSet resultSet = statement.executeQuery(consulta_junta); //Ejecuta la consulta
      
            if(resultSet.next()) { //Recorrer fila a fila mientras existan datos
                consulta2="DELETE FROM JUNTA_DIRECTIVA WHERE NUM_SOCIO='"+socio.getNum_socio()+"'";
                statement.executeUpdate(consulta2);
            }
                System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
                statement.executeUpdate(consulta); //Ejecuta la consulta en la BD
                
                System.out.println(consulta_junta);
                statement.executeQuery(consulta_junta);                              
           
                System.out.println(consulta2);
                

              

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error eliminando datos");
            }
            
        }
        
          //Una vez eleminado uno o varios elementos recarga la tabla entera sin aplicarle filtrado en caso de que lo tuviese
                JOptionPane.showMessageDialog(this, "Socio eliminado correctamente");
                
        recargarTabla();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgBuscadorSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgBuscadorSocio dialog = new DlgBuscadorSocio(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DNI;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblNombre;
    public static javax.swing.JTable tblSocios;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
 private DefaultComboBoxModel <String> modeloCategoria;
 public static DefaultTableModel modeloTablaSocios;
}
