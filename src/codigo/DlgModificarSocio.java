/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package codigo;


import static codigo.DlgBuscadorSocio.modeloTablaSocios;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JTextField;
import java.sql.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author bea
 */
public class DlgModificarSocio extends javax.swing.JDialog {
    //Establecemos color de fondo

    Color fondo = new Color(222, 237, 215);

    int num_socio = 0;
    
    private int limite = 9;
    
    private String usuario_recuperado ="";
    
    private String socio_recuperado="";

    /**
     * Creates new form DlgNuevoSocio
     */
    public DlgModificarSocio(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //Cambiar icono de la barra (no se ve en linux pero si en windows
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Logo.png")).getImage());

        //Pinta el formulario
        this.getContentPane().setBackground(fondo);
        
                //Centramos la ventana
        this.setLocationRelativeTo(null);
    }


    //Pasamos socio como un objeto y cargo como un string
    public DlgModificarSocio(javax.swing.JDialog parent, boolean modal, Socio socio, JuntaDirectiva junta_directiva) {
        super(parent, modal);
        initComponents();
                //Pinta el formulario
        this.getContentPane().setBackground(fondo);
        comprobarDNI();
        comprobarTelefono();
        
        usuario_recuperado = junta_directiva.getUsuario_app();
        socio_recuperado = socio.getDni();

        //Ocultamos usuario y contraseña para visibilizarlo cuando escojamos el radio button de junta directiva. 
        lblUsuario.setVisible(false);
        lblContraseña.setVisible(false);
        txtUsuario.setVisible(false);
        txtContraseña.setVisible(false);

        num_socio = socio.getNum_socio();

        if (socio.getJunta_directiva() == 0) {
            cmbCargo.setEnabled(false);
        } else {
            cmbCargo.setEnabled(true);
            cmbCargo.setSelectedItem(junta_directiva.getCargo());
            deshabilitarCampos(junta_directiva);
        }

        recuperarDatos(socio);
        

        //Se declaran y se asignan modelos
        modeloCargo = new DefaultComboBoxModel();

        //Se añaden elementos al combo
        modeloCargo.addElement("PRESIDENTE");
        modeloCargo.addElement("VICEPRESIDENTE");
        modeloCargo.addElement("TESORERO");
        modeloCargo.addElement("SECRETARIO");
        modeloCargo.addElement("VOCAL NATURALEZA");
        modeloCargo.addElement("VOCAL ESCALADA");
        modeloCargo.addElement("VOCAL MONTAÑA");
        modeloCargo.addElement("VOCAL CARRERAS");
        
        this.setTitle("MODIFICAR - " + socio.getDni()+ " " + socio.getNombre());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblDNI = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        dateFechaNacimiento = new com.toedter.calendar.JDateChooser();
        lblTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        btnModificar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        rbtSocioNormal = new javax.swing.JRadioButton();
        rbtJuntaDirectiva = new javax.swing.JRadioButton();
        cmbCargo = new javax.swing.JComboBox<>();
        lblCargo = new javax.swing.JLabel();
        lblUsuario = new javax.swing.JLabel();
        lblContraseña = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        txtContraseña = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SOCIO");
        setBackground(new java.awt.Color(222, 237, 215));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblDNI.setText("DNI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 10, 10);
        getContentPane().add(lblDNI, gridBagConstraints);

        lblNombre.setText("NOMBRE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblNombre, gridBagConstraints);

        lblApellido.setText("APELLIDO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblApellido, gridBagConstraints);

        lblEmail.setText("EMAIL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblEmail, gridBagConstraints);

        lblFecha.setText("FECHA NACIMIENTO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblFecha, gridBagConstraints);

        txtDNI.setMinimumSize(new java.awt.Dimension(101, 24));
        txtDNI.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(50, 25, 10, 10);
        getContentPane().add(txtDNI, gridBagConstraints);

        txtNombre.setMinimumSize(new java.awt.Dimension(101, 24));
        txtNombre.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtNombre, gridBagConstraints);

        txtApellido.setMinimumSize(new java.awt.Dimension(101, 24));
        txtApellido.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtApellido, gridBagConstraints);

        txtEmail.setMinimumSize(new java.awt.Dimension(101, 24));
        txtEmail.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtEmail, gridBagConstraints);

        dateFechaNacimiento.setBackground(new java.awt.Color(222, 237, 215));
        dateFechaNacimiento.setDateFormatString("yyyy-MM-dd");
        dateFechaNacimiento.setMinimumSize(new java.awt.Dimension(150, 24));
        dateFechaNacimiento.setPreferredSize(new java.awt.Dimension(150, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(dateFechaNacimiento, gridBagConstraints);

        lblTelefono.setText("TELÉFONO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(50, 25, 10, 10);
        getContentPane().add(lblTelefono, gridBagConstraints);

        txtTelefono.setMinimumSize(new java.awt.Dimension(101, 24));
        txtTelefono.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(50, 25, 10, 10);
        getContentPane().add(txtTelefono, gridBagConstraints);

        lblDireccion.setText("DIRECCIÓN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblDireccion, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtDireccion, gridBagConstraints);

        btnModificar.setText("MODIFICAR");
        btnModificar.setMaximumSize(new java.awt.Dimension(115, 35));
        btnModificar.setMinimumSize(new java.awt.Dimension(115, 35));
        btnModificar.setPreferredSize(new java.awt.Dimension(115, 35));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 50, 8);
        getContentPane().add(btnModificar, gridBagConstraints);

        btnCancelar.setText("CANCELAR");
        btnCancelar.setMaximumSize(new java.awt.Dimension(109, 35));
        btnCancelar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnCancelar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 50, 50);
        getContentPane().add(btnCancelar, gridBagConstraints);

        buttonGroup1.add(rbtSocioNormal);
        rbtSocioNormal.setSelected(true);
        rbtSocioNormal.setText("SOCIO NORMAL");
        rbtSocioNormal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtSocioNormalItemStateChanged(evt);
            }
        });
        rbtSocioNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtSocioNormalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(rbtSocioNormal, gridBagConstraints);

        buttonGroup1.add(rbtJuntaDirectiva);
        rbtJuntaDirectiva.setText("JUNTA DIRECTIVA");
        rbtJuntaDirectiva.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtJuntaDirectivaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        getContentPane().add(rbtJuntaDirectiva, gridBagConstraints);

        cmbCargo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ELEGIR OPCION", "PRESIDENTE", "VICEPRESIDENTE", "TESORERO", "SECRETARIO", "VOCAL NATURALEZA", "VOCAL ESCALADA", "VOCAL MONTAÑA ", "VOCA CARRERAS" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(cmbCargo, gridBagConstraints);

        lblCargo.setText("CARGO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblCargo, gridBagConstraints);

        lblUsuario.setText("USUARIO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblUsuario, gridBagConstraints);

        lblContraseña.setText("CONTRASEÑA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblContraseña, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtUsuario, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtContraseña, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //Botón que sirve para cerrar la ventana de creación de un socio
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

        boolean verificarFecha(){
        java.util.Date dat = new java.util.Date();
        if(dateFechaNacimiento.getDate().getTime()<=dat.getTime()){
            return true;
        }
        return false;
    }
        
    private static void deshabilitarCampos(JuntaDirectiva junta){
        txtUsuario.setVisible(true);
        txtContraseña.setVisible(true);
        txtUsuario.setText(junta.getUsuario_app());
        txtContraseña.setText(junta.getContraseña());
        txtUsuario.setEnabled(false);
        txtContraseña.setEnabled(false);
    }
    
    
    private void comprobarTelefono() {
        //Metodo para que la caja de texto de telefono no deje insertar más de 9 digitos. 
        JTextField txtTelefono = this.txtTelefono;
        txtTelefono.addKeyListener(new KeyListener() {
            //keyTyped(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla, pero solo cuando la tecla corresponde a caractéres, teclas especiales como F1, F2 entre otras no son identificadas.
            public void keyTyped(KeyEvent e) {
                if (txtTelefono.getText().length() == limite) {
                    e.consume();
                }
            }

            @Override
            //keyPressed(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla.
            public void keyPressed(KeyEvent ke) {
            }

            //keyReleased(KeyEvent e): Se ejecuta cuando el usuario libera una tecla
            @Override
            public void keyReleased(KeyEvent ke) {
            }

        });
    }

    private void comprobarDNI() {
        //Metodo para que la caja de texto de dni no deje insertar más de 9 digitos. 
        JTextField txtDNI = this.txtDNI;
        txtDNI.addKeyListener(new KeyListener() {
            //keyTyped(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla, pero solo cuando la tecla corresponde a caractéres, teclas especiales como F1, F2 entre otras no son identificadas.
            public void keyTyped(KeyEvent e) {
                if (txtDNI.getText().length() == limite) {
                    e.consume();
                }
            }

            @Override
            //keyPressed(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla.
            public void keyPressed(KeyEvent ke) {
            }

            //keyReleased(KeyEvent e): Se ejecuta cuando el usuario libera una tecla
            @Override
            public void keyReleased(KeyEvent ke) {
            }

        });
    }
    
    
    private boolean existeDNI(String dni,String dniRecuperado){
        //Método que comprueba si existe o no un socio con el mismo DNI. En caso de que exista no podremos crear un nuevo socio con dicho DNI.
            
        String dniSocio="";
      
               
        try {
            //Crear un statement. Statement significa que en la conexion que tengo abierta me cree una zona de trabajo 
            Statement statement = Conexion.getConexion().createStatement();
            //Generamos la consulta SELECT
            String consulta = "SELECT DNI FROM SOCIO WHERE DNI='"+dni+"'";
            //Imprimimos en consola la consulta por si hay errores.
            System.out.println(consulta);
            //Ejecutamos la consulta SELECT
            ResultSet resultSet = statement.executeQuery(consulta);

            
            while (resultSet.next()) {                 
                dniSocio = resultSet.getString(1);          
     
            }

        } catch (SQLException e1) {
            e1.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error recuperando datos de usuario");

        }
        if (dni.equals(dniSocio) && !dniSocio.equals(dniRecuperado)) {
            return true;

        } else {
            return false;
        }

    }
 
    private boolean existeUsuario(String usuario) {
        //Método que comprueba si existe o no un socio con el mismo usuario. En caso de que exista no podremos crear un nuevo socio con dicho DNI.

        String login = "";

        try {
            //Crear un statement. Statement significa que en la conexion que tengo abierta me cree una zona de trabajo 
            Statement statement = Conexion.getConexion().createStatement();
            //Generamos la consulta SELECT
            String consulta = "SELECT USUARIO_APP FROM JUNTA_DIRECTIVA WHERE USUARIO_APP='" + usuario + "'";
            //Imprimimos en consola la consulta por si hay errores.
            System.out.println(consulta);
            //Ejecutamos la consulta SELECT
            ResultSet resultSet = statement.executeQuery(consulta);

            while (resultSet.next()) {
                login = resultSet.getString(1);

            }

        } catch (SQLException e1) {
            e1.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error recuperando datos de usuario");

        }
        //Compara el usuario de la BD con el usuario escrito en la caja de texto, además comprueba que el usuario recuperado del buscador sea diferente al usuario de la BD
        //Si coincide lo primero y a la vez es diferente lo segundo significa que ya existe un usuario con ese login en la BD
    
        if (usuario.equals(login)) {
            return true;

        } else {
            return false;
        }

    }

    private void recuperarDatos(Socio socio) {
        txtDNI.setText(socio.getDni());
        txtNombre.setText(socio.getNombre());
        txtApellido.setText(socio.getApellido());
        txtTelefono.setText(String.valueOf(socio.getTelefono()));
        ((JTextField) dateFechaNacimiento.getDateEditor().getUiComponent()).setText(socio.getFecha_nacimiento());
        txtDireccion.setText(socio.getDireccion());
        txtEmail.setText(socio.getEmail());

        num_socio = socio.getNum_socio();

        if (socio.getJunta_directiva() == 0) {
            rbtSocioNormal.setSelected(true);
          
        } else {
            rbtJuntaDirectiva.setSelected(true);
        }
    }
          

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        //Recuperamos los valores de las cajas de texto y del campo para fechas.
        String dni = txtDNI.getText().trim();
        String nombre = txtNombre.getText().trim();
        String apellido = txtApellido.getText().trim();
        String fecha_nacimiento = ((JTextField) dateFechaNacimiento.getDateEditor().getUiComponent()).getText();
        String telefonoS = txtTelefono.getText().trim();
        String direccion = txtDireccion.getText().trim();
        String email = txtEmail.getText().trim();
        int telefono = 0;
        String usuario = txtUsuario.getText().trim().toLowerCase();
        String contraseña = txtContraseña.getText().trim();

        int indiceCargo = cmbCargo.getSelectedIndex();
        String cargo = modeloCargo.getElementAt(indiceCargo);

        int junta_directiva = 0;

        String consulta_update = "";
        String consulta_insert = "";

        Statement statement = null;

        Connection conexion = null; //Para poder hacer el rollback. Poder acceder a la clase conexion y poder utilizar los metodos que tiene

        try {

            //Validaciones
            if (dni.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Campo DNI obligatorio");
                return;
            }

            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Campo nombre obligatorio");
                return;
            }
            if (apellido.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Campo apellido obligatorio");
                return;
            }

            //FALTA VALIDAR QUE LA FECHA DE NACIMIENTO NO SEA SUPERIOR A LA FECHA ACTUAL
            if (fecha_nacimiento.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Campo fecha nacimiento obligatorio");
                return;
            }
            if (telefonoS.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Campo telefono obligatorio");
                return;
            }
            if (direccion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Campo direccion obligatorio");
                return;
            }
           
                telefono = 0;
                try {
                    telefono = Integer.parseInt(telefonoS);
                

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El teléfono debe ser un número entero");
                return;
            }
                
            try {
                //Conexion a la base de datos (again)
                conexion = DriverManager.getConnection("jdbc:mysql://localhost/BESTARRUZA", "root", "FPDual2022");
                System.out.println("Conexion realizada con exito");

            } catch (Exception e) {
                e.printStackTrace();
            }

            conexion.setAutoCommit(false); //Empieza la transacción

        if(existeDNI(dni, socio_recuperado)){
            JOptionPane.showMessageDialog(this, "Ya existe el dni");
        }
        else if(verificarFecha()==false){
            JOptionPane.showMessageDialog(this, "La fecha de nacimiento no puede ser superior al día de hoy");
        }
        else{

            //Crear un statement. Statement significa que en la conexion que tengo abierta me cree una zona de trabajo 
            statement = Conexion.getConexion().createStatement();

            if (rbtSocioNormal.isSelected()) {
                //Generamos la consulta INSERT para introducir los datos del nuevo socio en la base de datos
                consulta_update = "UPDATE SOCIO SET DNI='" + dni + "', NOMBRE ='" + nombre + "', APELLIDO ='" + apellido + "', FECHA_NACIMIENTO='" + fecha_nacimiento + "', DIRECCION='" + direccion + "', TELEFONO='" + telefono + "', EMAIL='" + email + "', JUNTA_DIRECTIVA=0 WHERE NUM_SOCIO='" + num_socio + "'";
                    //Imprimimos por pantalla por si hay errores
                    System.out.println(consulta_update);
                    
                    cmbCargo.setSelectedIndex(0);
                    
                    txtUsuario.setText("");
                    txtContraseña.setText("");
                    txtUsuario.setVisible(false);
                    txtContraseña.setVisible(false);
                    
                    
                    //Ejecutamos la actualización de los datos de la base de datos 
                    statement.executeUpdate(consulta_update);
                    JOptionPane.showMessageDialog(this, "Socio modificado correctamente");

                } else {
                    if (existeUsuario(usuario)) {
                        JOptionPane.showMessageDialog(this, "Ya existe el usuario");
                    } else{

                        //Generamos la consulta INSERT para introducir los datos del nuevo miembro de la junta directiva en la base de datos
                        junta_directiva = 1;
                        consulta_update = "UPDATE SOCIO SET DNI='" + dni + "', NOMBRE ='" + nombre + "', APELLIDO ='" + apellido + "', FECHA_NACIMIENTO='" + fecha_nacimiento + "', DIRECCION='" + direccion + "', TELEFONO='" + telefono + "', EMAIL='" + email + "', JUNTA_DIRECTIVA=" + junta_directiva + " WHERE NUM_SOCIO='" + num_socio + "'";
                        //Imprimimos por pantalla por si hay errores
                        System.out.println(consulta_update);
                        //Ejecutamos la actualización de los datos de la base de datos 
                        statement.executeUpdate(consulta_update);

                        consulta_insert = "INSERT INTO JUNTA_DIRECTIVA (NUM_SOCIO, CARGO, USUARIO_APP, CONTRASEÑA) VALUES (" + num_socio + ", '" + cargo + "','" + usuario + "', '" + Encriptado.encriptar(contraseña) + "')";
                        System.out.println(consulta_insert);
                        statement.executeUpdate(consulta_insert);
                        JOptionPane.showMessageDialog(this, "Socio modificado correctamente");
                    }
                }

                conexion.commit(); //Confirmamos los cambios
                conexion.setAutoCommit(true); //finalizamos la transaccion

            }
        }catch (SQLIntegrityConstraintViolationException e) {
            System.out.println("ESTÁ PASANDO");
            try {
                conexion.rollback(); //Volvemos atrás a la última consulta realizada correctamente. 
                //Generamos la consulta INSERT para introducir los datos del nuevo socio en la base de datos
                junta_directiva = 0; //Actualizamos el socio modificado (que no pertenece a la junta directiva)
                consulta_update = "UPDATE SOCIO SET DNI='" + dni + "', NOMBRE ='" + nombre + "', APELLIDO ='" + apellido + "', FECHA_NACIMIENTO='" + fecha_nacimiento + "', DIRECCION='" + direccion + "', TELEFONO='" + telefono + "', EMAIL='" + email + "', JUNTA_DIRECTIVA=" + junta_directiva + " WHERE NUM_SOCIO='" + num_socio + "'";
                //Imprimimos por pantalla por si hay errores
                System.out.println(consulta_update);
                //Ejecutamos la actualización de los datos de la base de datos 
                statement.executeUpdate(consulta_update);

                JOptionPane.showMessageDialog(this, "El usuario ya existe o el cargo ya existe");

            } catch (SQLException ex) {
                System.err.println("ERROR HACIENDO ROLLBACK");
            }

        }  
        catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error insertando datos");

        } finally {
            recargarTabla();

        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void recargarTabla() {
        modeloTablaSocios.setRowCount(0);
        try {
            Statement statement = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            String consulta = "SELECT SOCIO.NUM_SOCIO, DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL, JUNTA_DIRECTIVA, JUNTA_DIRECTIVA.CARGO, JUNTA_DIRECTIVA.USUARIO_APP, JUNTA_DIRECTIVA.CONTRASEÑA FROM SOCIO LEFT JOIN JUNTA_DIRECTIVA ON SOCIO.NUM_SOCIO=JUNTA_DIRECTIVA.NUM_SOCIO";

            System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
            ResultSet resultSet = statement.executeQuery(consulta); //Ejecuta la consulta
            int junta = 0;
            int num_socio = 0;
            while (resultSet.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                num_socio = resultSet.getInt(1); //Primera columna
                String dni = resultSet.getString(2); //Segunda columna
                String nombre = resultSet.getString(3); //Tercera columna
                String apellido = resultSet.getString(4);
                String fecha_nacimiento = resultSet.getString(5);
                String direccion = resultSet.getString(6);
                int telefono = resultSet.getInt(7);
                String email = resultSet.getString(8);
                int junta_directiva = resultSet.getInt(9);
                
                String cargo_junta = resultSet.getString(10);
                String usuario_app = resultSet.getString(11);
                String contraseña = resultSet.getString(12);
                                        
              
                if (junta_directiva == 0) {
                    cargo_junta = "SIN CARGO";
                }
                
                    
                //Creo socio y miembro de la junta directiva
                Socio socio = new Socio(num_socio, dni, nombre, apellido, email, fecha_nacimiento, telefono, direccion, junta_directiva);
                JuntaDirectiva juntaDirectiva = new JuntaDirectiva(usuario_app, contraseña, cargo_junta);

                //Meto en el modelo                
                modeloTablaSocios.setRowCount(modeloTablaSocios.getRowCount() + 1);

                //Añadir objeto completo en la primera celda
                modeloTablaSocios.setValueAt(socio, modeloTablaSocios.getRowCount() - 1, 0);

                //Llenamos las diferentes columnas                                
                modeloTablaSocios.setValueAt(socio.getDni(), modeloTablaSocios.getRowCount() - 1, 1);
                modeloTablaSocios.setValueAt(socio.getNombre(), modeloTablaSocios.getRowCount() - 1, 2);
                modeloTablaSocios.setValueAt(socio.getApellido(), modeloTablaSocios.getRowCount() - 1, 3);
                modeloTablaSocios.setValueAt(socio.getEmail(), modeloTablaSocios.getRowCount() - 1, 4);
                modeloTablaSocios.setValueAt(socio.getFecha_nacimiento(), modeloTablaSocios.getRowCount() - 1, 5);
                modeloTablaSocios.setValueAt(socio.getDireccion(), modeloTablaSocios.getRowCount() - 1, 6);
                modeloTablaSocios.setValueAt(socio.getTelefono(), modeloTablaSocios.getRowCount() - 1, 7);
                modeloTablaSocios.setValueAt(juntaDirectiva, modeloTablaSocios.getRowCount() - 1, 8);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error actualizando tabla");
            e.printStackTrace();
            dispose();
        }
        
    }
    
        private void actualizarUsuarioMenu(String usuario){
       //Actualiza el nombre del usuario para el menu bar (cuenta)
           FrmPrincipal.mnuUsuario.setText(usuario.toUpperCase());
    }
        
    private void rbtJuntaDirectivaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtJuntaDirectivaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            //Visibilizamos el combo y las etiquetas y cajas de texto correspondientes a usuario y contraseña.            
            cmbCargo.setEnabled(true);
            lblUsuario.setVisible(true);
            lblContraseña.setVisible(true);
            txtUsuario.setVisible(true);
            txtContraseña.setVisible(true);
            txtUsuario.setEnabled(true);
            txtContraseña.setEnabled(true);
        }
    }//GEN-LAST:event_rbtJuntaDirectivaItemStateChanged

    
    private void rbtSocioNormalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtSocioNormalItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            //Visibilizamos el combo y las etiquetas y cajas de texto correspondientes a usuario y contraseña.            
            cmbCargo.setEnabled(false);
            lblUsuario.setVisible(false);
            lblContraseña.setVisible(false);
            txtUsuario.setVisible(false);
            txtContraseña.setVisible(false);
                        txtUsuario.setEnabled(false);
            txtContraseña.setEnabled(false);
        }
    }//GEN-LAST:event_rbtSocioNormalItemStateChanged

    private void rbtSocioNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtSocioNormalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtSocioNormalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgModificarSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgModificarSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgModificarSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgModificarSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgModificarSocio dialog = new DlgModificarSocio(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnModificar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbCargo;
    private com.toedter.calendar.JDateChooser dateFechaNacimiento;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblCargo;
    private javax.swing.JLabel lblContraseña;
    private javax.swing.JLabel lblDNI;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JRadioButton rbtJuntaDirectiva;
    private javax.swing.JRadioButton rbtSocioNormal;
    private javax.swing.JTextField txtApellido;
    public static javax.swing.JPasswordField txtContraseña;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    public static javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
public DefaultComboBoxModel<String> modeloCargo;

}
