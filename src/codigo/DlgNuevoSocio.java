/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package codigo;

import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JTextField;
import java.sql.*;
import java.time.Instant;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.util.*;
import java.util.Date;

/**
 *
 * @author bea
 */
public class DlgNuevoSocio extends javax.swing.JDialog {
    //Establecemos color de fondo

    Color fondo = new Color(222, 237, 215);

    private int limite = 9;

//     java.util.Date dat = new java.util.Date();//Instancia la fecha del sistema
    /**
     * Creates new form DlgNuevoSocio
     */
    public DlgNuevoSocio(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //Pinta el formulario
        this.getContentPane().setBackground(fondo);

        //Cambiar icono de la barra (no se ve en linux pero si en windows
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Logo.png")).getImage());
        
                //Centramos la ventana
        this.setLocationRelativeTo(null);
        
        comprobarDNI();
        comprobarTelefono();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblDNI = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        dateFechaNacimiento = new com.toedter.calendar.JDateChooser();
        lblTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NUEVO SOCIO");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(222, 237, 215));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblDNI.setText("DNI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 10, 10);
        getContentPane().add(lblDNI, gridBagConstraints);

        lblNombre.setText("NOMBRE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblNombre, gridBagConstraints);

        lblApellido.setText("APELLIDO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblApellido, gridBagConstraints);

        lblEmail.setText("EMAIL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblEmail, gridBagConstraints);

        lblFecha.setText("FECHA NACIMIENTO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 10, 10);
        getContentPane().add(lblFecha, gridBagConstraints);

        txtDNI.setMinimumSize(new java.awt.Dimension(101, 24));
        txtDNI.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(50, 25, 10, 10);
        getContentPane().add(txtDNI, gridBagConstraints);

        txtNombre.setMinimumSize(new java.awt.Dimension(101, 24));
        txtNombre.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtNombre, gridBagConstraints);

        txtApellido.setMinimumSize(new java.awt.Dimension(101, 24));
        txtApellido.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtApellido, gridBagConstraints);

        txtEmail.setMinimumSize(new java.awt.Dimension(101, 24));
        txtEmail.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtEmail, gridBagConstraints);

        dateFechaNacimiento.setBackground(new java.awt.Color(222, 237, 215));
        dateFechaNacimiento.setDateFormatString("yyyy-MM-dd");
        dateFechaNacimiento.setMinimumSize(new java.awt.Dimension(150, 24));
        dateFechaNacimiento.setPreferredSize(new java.awt.Dimension(150, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(dateFechaNacimiento, gridBagConstraints);

        lblTelefono.setText("TELÉFONO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(50, 25, 10, 10);
        getContentPane().add(lblTelefono, gridBagConstraints);

        txtTelefono.setMinimumSize(new java.awt.Dimension(101, 24));
        txtTelefono.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(50, 25, 10, 10);
        getContentPane().add(txtTelefono, gridBagConstraints);

        lblDireccion.setText("DIRECCIÓN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblDireccion, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtDireccion, gridBagConstraints);

        btnGuardar.setText("GUARDAR");
        btnGuardar.setMaximumSize(new java.awt.Dimension(109, 35));
        btnGuardar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnGuardar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 50, 10);
        getContentPane().add(btnGuardar, gridBagConstraints);

        btnCancelar.setText("CANCELAR");
        btnCancelar.setMaximumSize(new java.awt.Dimension(109, 35));
        btnCancelar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnCancelar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 50, 50);
        getContentPane().add(btnCancelar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    boolean verificarFecha(){
        Date dat = new Date();
        if(dateFechaNacimiento.getDate().getTime()<=dat.getTime()){
            return true;
        }
        return false;
    }
    
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
       //Botón que sirve para cerrar la ventana de creación de un socio
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private boolean existeDNI(String dni){
        //Método que comprueba si existe o no un socio con el mismo DNI. En caso de que exista no podremos crear un nuevo socio con dicho DNI.
            
        String dniSocio="";
      
               
        try {
            //Crear un statement. Statement significa que en la conexion que tengo abierta me cree una zona de trabajo 
            Statement statement = Conexion.getConexion().createStatement();
            //Generamos la consulta SELECT
            String consulta = "SELECT DNI FROM SOCIO WHERE DNI='"+dni+"'";
            //Imprimimos en consola la consulta por si hay errores.
            System.out.println(consulta);
            //Ejecutamos la consulta SELECT
            ResultSet resultSet = statement.executeQuery(consulta);

            
            while (resultSet.next()) {                 
                dniSocio = resultSet.getString(1);          
     
            }

        } catch (SQLException e1) {
            e1.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error recuperando datos de usuario");

        }
        if (dni.equals(dniSocio)) {
            return true;

        } else {
            return false;
        }

    }
    
    private void comprobarTelefono() {
        //Metodo para que la caja de texto de telefono no deje insertar más de 9 digitos. 
        JTextField txtTelefono = this.txtTelefono;
        txtTelefono.addKeyListener(new KeyListener() {
            //keyTyped(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla, pero solo cuando la tecla corresponde a caractéres, teclas especiales como F1, F2 entre otras no son identificadas.
            public void keyTyped(KeyEvent e) {
                if (txtTelefono.getText().length() == limite) {
                    e.consume();
                }
            }

            @Override
            //keyPressed(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla.
            public void keyPressed(KeyEvent ke) {
            }

            //keyReleased(KeyEvent e): Se ejecuta cuando el usuario libera una tecla
            @Override
            public void keyReleased(KeyEvent ke) {
            }

        });
    }

    private void comprobarDNI() {
        //Metodo para que la caja de texto de dni no deje insertar más de 9 digitos. 
        JTextField txtDNI = this.txtDNI;
        txtDNI.addKeyListener(new KeyListener() {
            //keyTyped(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla, pero solo cuando la tecla corresponde a caractéres, teclas especiales como F1, F2 entre otras no son identificadas.
            public void keyTyped(KeyEvent e) {
                if (txtDNI.getText().length() == limite) {
                    e.consume();
                }
            }

            @Override
            //keyPressed(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla.
            public void keyPressed(KeyEvent ke) {
            }

            //keyReleased(KeyEvent e): Se ejecuta cuando el usuario libera una tecla
            @Override
            public void keyReleased(KeyEvent ke) {
            }

        });
    }

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
    //Recuperamos los valores de las cajas de texto y del campo para fechas.
    String dni = txtDNI.getText().trim();
    String nombre = txtNombre.getText().trim();
    String apellido = txtApellido.getText().trim();
    String fecha_nacimiento =((JTextField)dateFechaNacimiento.getDateEditor().getUiComponent()).getText();
    String telefonoS = txtTelefono.getText().trim();
    String direccion = txtDireccion.getText().trim();
    String email = txtEmail.getText().trim();
    
    
    try{
  
        //Validaciones
        if (dni.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Campo DNI obligatorio");
            return;
        }

        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Campo nombre obligatorio");
            return;
        }
        if (apellido.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Campo apellido obligatorio");
            return;
        }

        //FALTA VALIDAR QUE LA FECHA DE NACIMIENTO NO PUEDA SER SUPERIOR A LA FECHA ACTUAL
        if (fecha_nacimiento.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Campo fecha nacimiento obligatorio");
            return;
        }
        
        if (telefonoS.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Campo telefono obligatorio");
            return;
        }
        if (direccion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Campo direccion obligatorio");
            return;
        }

        int telefono = 0;
        try {
            telefono = Integer.parseInt(telefonoS);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El teléfono debe ser un número entero");
            return;
        }

        if (telefono < 0 || telefono > 999999999 || telefono < 111111111) {
            JOptionPane.showMessageDialog(this, "El teléfono tiene que tener 9 dígitos");
            return;
        }

        if (existeDNI(dni)) {
            JOptionPane.showMessageDialog(this, "Ya existe el dni");
        } else if (verificarFecha()==false){
            JOptionPane.showMessageDialog(this, "La fecha de nacimiento no puede ser superior al día de hoy");
            
        }else{
            //Crear un statement. Statement significa que en la conexion que tengo abierta me cree una zona de trabajo 
            Statement statement = Conexion.getConexion().createStatement();
            //Generamos la consulta INSERT para introducir los datos del nuevo socio en la base de datos
            String consulta = "INSERT INTO SOCIO (DNI, NOMBRE, APELLIDO, FECHA_NACIMIENTO, DIRECCION, TELEFONO, EMAIL) VALUES ('" + dni + "', '" + nombre + "','" + apellido + "', '" + fecha_nacimiento + "','" + direccion + "','" + telefono + "','" + email + "')";
            //Imprimimos por pantalla por si hay errores
            System.out.println(consulta);
            //Ejecutamos la actualización de los datos de la base de datos 
            statement.executeUpdate(consulta);

            JOptionPane.showMessageDialog(this, "Socio guardado correctamente");
            limpiar();
        }
        

    } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,"Error insertando datos");
     
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

     private void limpiar(){
        txtNombre.setText("");
        txtApellido.setText("");
        txtDNI.setText("");
        txtDireccion.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        dateFechaNacimiento.setDate(null);
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoSocio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgNuevoSocio dialog = new DlgNuevoSocio(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private com.toedter.calendar.JDateChooser dateFechaNacimiento;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblDNI;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
