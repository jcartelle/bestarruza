/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package codigo;


import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.io.InputStream;
import static java.lang.String.valueOf;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import static java.time.temporal.ChronoUnit.DAYS;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author bea
 */
public class DlgPrestamos extends javax.swing.JDialog {
    
     //Establecemos color de fondo
        Color fondo= new Color(222, 237, 215 );
        
        int limite=9;
        
            private String directorioInforme;


    /**
     * Creates new form DlgDevoluciones
     */
    public DlgPrestamos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
                 //Pinta el formulario
        this.getContentPane().setBackground(fondo);
        
        //Cambiar icono de la barra (no se ve en linux pero si en windows
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Logo.png")).getImage());

                //Centramos la ventana
        this.setLocationRelativeTo(null);
        
        //Decarar y ligar tabla al modelo
        modeloTablaPrestamos = (DefaultTableModel) tblPrestamos.getModel();
        tblPrestamos.setModel(modeloTablaPrestamos);
        
        
        //Recargamos la tabla
        recargarTabla();

        comprobarDNI();

        //INFORMES
        
        URL urlInformes = this.getClass().getResource("../informes");

        try {
            directorioInforme = urlInformes.toURI().getPath(); //convertimos la URL en una URI (.toURI()) y recogemos la ruta (.getPath()).
            System.out.println("DIRECTORIO: " + directorioInforme);
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        popMnuInformes = new javax.swing.JPopupMenu();
        mnuiInformeMaterial = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        txtCodSocio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        txtCodMaterial = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        ScrollTabla = new javax.swing.JScrollPane();
        tblPrestamos = new javax.swing.JTable();
        btnDevolver = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        mnuiInformeMaterial.setText("Generar informe prestamo material");
        mnuiInformeMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuiInformeMaterialActionPerformed(evt);
            }
        });
        popMnuInformes.add(mnuiInformeMaterial);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PRESTAMOS");
        setBackground(new java.awt.Color(222, 237, 215));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("CODIGO SOCIO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(30, 50, 4, 0);
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(30, 20, 0, 70);
        getContentPane().add(txtCodSocio, gridBagConstraints);

        jLabel2.setText("DNI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 4, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("CODIGO MATERIAL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 4, 0);
        getContentPane().add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 70);
        getContentPane().add(txtDni, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 70);
        getContentPane().add(txtCodMaterial, gridBagConstraints);

        btnBuscar.setText("BUSCAR");
        btnBuscar.setMaximumSize(new java.awt.Dimension(109, 35));
        btnBuscar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnBuscar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 70);
        getContentPane().add(btnBuscar, gridBagConstraints);

        tblPrestamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID PRESTAMO", "SOCIO", "MATERIAL", "FECHA INICIO", "D√çAS RESTANTES", "DEVOLVER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPrestamos.setComponentPopupMenu(popMnuInformes);
        ScrollTabla.setViewportView(tblPrestamos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(30, 50, 30, 0);
        getContentPane().add(ScrollTabla, gridBagConstraints);

        btnDevolver.setText("DEVOLVER");
        btnDevolver.setMinimumSize(new java.awt.Dimension(109, 35));
        btnDevolver.setPreferredSize(new java.awt.Dimension(109, 35));
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 70);
        getContentPane().add(btnDevolver, gridBagConstraints);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnLimpiar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 70);
        getContentPane().add(btnLimpiar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        filtrar();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
        // TODO add your handling code here:
        devolver();
            
       
    }//GEN-LAST:event_btnDevolverActionPerformed

    private void mnuiInformeMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuiInformeMaterialActionPerformed
 //Le decimos como se llama el infomre al que queremos a√±adir; ruta anterior + nombre del report
        String informeJRXML = directorioInforme.concat("/informe_prestamo_material.jrxml");

        //HashMap: Almac√©n de datos sin √≠ndice, est√°n referenciados por una clave. 
        HashMap parametro = new HashMap(); //creamos un nuevo HashMap. Ya tenemos un almac√©n de datos
        //Queremos que en parametro autor ponga el nombre de una persona,
        parametro.put("AUTOR", FrmPrincipal.mnuUsuario.getText());//Metemos en el hashmap la marca que estamos buscando que queremos guardar

        try {

            //CARGAR IMAGENES
            InputStream recurso = this.getClass().getResourceAsStream("../imagenes/Logo.png");
//            InputStream recurso1 = this.getClass().getResourceAsStream("../imagenes/ko.png");
            
            Image imagen = ImageIO.read(recurso);
//            Image imagen1 = ImageIO.read(recurso1);
            
            parametro.put("LOGO", imagen);
//            parametro.put("IMAGEN_KO", imagen1);

            //Recuperar datos a mostrar: ESTAMOS AQU√ç
            String consulta = "SELECT ID_PRESTAMO, CODIGO_MATERIAL, NUM_SOCIO, FECHA_PRESTAMO, FECHA_DEVOLUCION FROM PRESTAMO_MATERIAL WHERE CODIGO_MATERIAL="+txtCodMaterial.getText();
            Statement statement = Conexion.getConexion().createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);
            //Empaqueta el contenido del resultSet para enviarlo al FillReport 
            JRResultSetDataSource jr = new JRResultSetDataSource(resultSet);
           
            
            System.out.println("Compilando...");
            //Compilar, pasar el archivo jrxml (texto) a binario
            JasperReport jasperReport = JasperCompileManager.compileReport(informeJRXML);
            //Ponemos una traza para saber donde fallo si hay algun error
            System.out.println("Compilado...");

            //Rellenar: Rellenar los campos del informe
            System.out.println("Rellenando...");
            //primer par√°metro: informe compilado en el paso anterior
            //segundo par√°metro: parametro-->MARCA
            //tercer par√°metro: datos de la consulta sql (jr)
            JasperPrint impresion = JasperFillManager.fillReport(jasperReport, parametro, jr);
            System.out.println("Relleno...");

            //Comprobar p√°ginas. Si el informe no tiene ningun campo que coincida con el campo que buscamos, ya no saldr√° el informe, y saldr√° un mensaje informando de que no hay campos 
            int numPaginas = impresion.getPages().size();
            if (numPaginas == 0) {
                JOptionPane.showMessageDialog(this, "No hay registros que coincidan con la b√∫squeda");

            } else {
                //Mostramos el informe con los registros de b√∫squeda
                JasperViewer.viewReport(impresion, false);
            }

        } catch (SQLException ex) {
            System.out.println("Error accediendo a la base de datos");
            ex.printStackTrace();

        } catch (JRException e) {
            System.out.println("Error generando informe");
            e.printStackTrace();

        } catch (IOException ex) {
            System.out.println("Error cargando imagen");
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_mnuiInformeMaterialActionPerformed

    private void devolver() {
        int posiciones[] = tblPrestamos.getSelectedRows();

        if (posiciones.length == 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento");
            return;
        } else if(posiciones.length>1){
            JOptionPane.showMessageDialog(this, "Solo puede seleccionar un elemento");
            return; 
        } else if(posiciones.length==1){
            
        

        //Recuperamos el pr√©stamo de la tabla
        for (int i = 0; i < posiciones.length; i++) {

            Prestamo prestamo = (Prestamo) modeloTablaPrestamos.getValueAt(posiciones[i], 0);
            boolean valor = (Boolean) tblPrestamos.getValueAt(posiciones[i], 5);
            
            System.out.println(valor);
            if (valor == true) {

                try { //Insert,delete,modify
            Statement stmt=Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
            
            //Actualizamos las unidades de comic. Si se borra el pr√©stamo, regresa la unidad            
            String consultaUpdate = "UPDATE MATERIAL JOIN PRESTAMO_MATERIAL ON MATERIAL.CODIGO = PRESTAMO_MATERIAL.CODIGO_MATERIAL SET MATERIAL.UNIDADES= MATERIAL.UNIDADES+1 "
                    + "WHERE PRESTAMO_MATERIAL.CODIGO_MATERIAL = "+prestamo.getCodigo_material();
            
            System.out.println(consultaUpdate); //Imprime por pantalla la consulta para ver posibles errores
            stmt.executeUpdate(consultaUpdate); //Ejecuta la consulta en la BD
            
            
            //Actulizamos la fecha de devoluci√≥n del pr√©stamo
            LocalDate fechaActual = LocalDate.now();
            String consultaElim="UPDATE PRESTAMO_MATERIAL SET FECHA_DEVOLUCION='"+fechaActual+"', DEVUELTO=1 WHERE ID_PRESTAMO="+prestamo.getId_prestamo();
            System.out.println(consultaElim); //Imprime por pantalla la consulta para ver posibles errores
            stmt.executeUpdate(consultaElim); //Ejecuta la consulta en la BD
           
            
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error devolviendo material");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debes marcar el checkbox de la tabla");
            }
                    

        }
        //Una vez eleminado uno o varios elementos recarga la tabla entera sin aplicarle filtrado en caso de que lo tuviese
            recargarTabla();
            }
         
    }
    
    private void limpiar(){
        txtDni.setText("");
        txtCodMaterial.setText("");
        txtCodSocio.setText("");
       
    }
        
    private void recargarTabla(){
         
        modeloTablaPrestamos.setRowCount(0);
        try {
            Statement statement = Conexion.getConexion().createStatement(); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta
//            String consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
//                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
//                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE PRESTAMO_MATERIAL.DEVUELTO=0";
String consulta = "SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE DEVUELTO=0";
            System.out.println(consulta); //Imprime por pantalla la consulta para ver posibles errores
            ResultSet resultSet = statement.executeQuery(consulta); //Ejecuta la consulta
            int codigo_material = 0;
            int num_socio = 0;
            while (resultSet.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                int id_prestamo = resultSet.getInt(1);
                num_socio = resultSet.getInt(2); //Primera columna
                codigo_material= resultSet.getInt(3);              
                String fecha_prestamo = resultSet.getString(4);
                String fecha_limite = resultSet.getString(5);
                String fecha_devolucion = resultSet.getString(6);      
                boolean devuelto = resultSet.getBoolean(7);  
                                        
         
                //Creo nuevo prestamo
                Prestamo prestamo= new Prestamo(id_prestamo, codigo_material, num_socio, fecha_prestamo, fecha_limite, fecha_devolucion, devuelto);
   //Recogemos la fecha actual del sistema
               LocalDate fechaActual = LocalDate.now();
              
               
                
             //Se crean la variable de fecha local de la fecha de fin para poder calcular con ella
           
            LocalDate fechaFin = LocalDate.parse(fecha_limite);
             String dias_restantesS="";
            
            //Contamos los d√≠as que hay desde la fecha actual hasta la fecha de finalizaci√≥n del pr√©stamo
                
              long dias = DAYS.between(fechaActual, fechaFin);
              
              
              //Si los d√≠as restantes son negativos significa que ya acab√≥ el tiempo del pr√©stamo e introducimos eso en la columna
               if(dias<-1){
                  dias_restantesS="LLeva "+-dias+" d√≠as de retraso";                 
               
               } else if(dias<0){
                  dias_restantesS="Lleva "+-dias+" d√≠a de retraso";                 
               
               } else {                   
                dias_restantesS= valueOf(dias);
               }
               
               
                //Meto en el modelo                
                modeloTablaPrestamos.setRowCount(modeloTablaPrestamos.getRowCount() + 1);

                //A√±adir objeto completo en la primera celda
                modeloTablaPrestamos.setValueAt(prestamo, modeloTablaPrestamos.getRowCount() - 1, 0);

                //Llenamos las diferentes columnas                                
                modeloTablaPrestamos.setValueAt(prestamo.getNum_socio(), modeloTablaPrestamos.getRowCount() - 1, 1);
                modeloTablaPrestamos.setValueAt(prestamo.getCodigo_material(), modeloTablaPrestamos.getRowCount() - 1, 2);
                modeloTablaPrestamos.setValueAt(prestamo.getFecha_prestamo(), modeloTablaPrestamos.getRowCount() - 1, 3);
                modeloTablaPrestamos.setValueAt(dias_restantesS, modeloTablaPrestamos.getRowCount() - 1, 4);
                modeloTablaPrestamos.setValueAt(prestamo.isDevuelto(), modeloTablaPrestamos.getRowCount() - 1, 5);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error actualizando tabla");
            e.printStackTrace();
            dispose();
        }
    
    }
    
    private void comprobarDNI() {
        //Metodo para que la caja de texto de dni no deje insertar m√°s de 9 digitos. 
        JTextField txtDNI = this.txtDni;
        txtDNI.addKeyListener(new KeyListener() {
            //keyTyped(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla, pero solo cuando la tecla corresponde a caract√©res, teclas especiales como F1, F2 entre otras no son identificadas.
            public void keyTyped(KeyEvent e) {
                if (txtDNI.getText().length() == limite) {
                    e.consume();
                }
            }

            @Override
            //keyPressed(KeyEvent e): Se ejecuta cuando el usuario presiona una tecla.
            public void keyPressed(KeyEvent ke) {
            }

            //keyReleased(KeyEvent e): Se ejecuta cuando el usuario libera una tecla
            @Override
            public void keyReleased(KeyEvent ke) {
            }

        });
    }
    
    private void filtrar() {
        String cod_socio = txtCodSocio.getText().trim();      
        String cod_material = txtCodMaterial.getText().trim();
        String dni = txtDni.getText().trim();   
        String consulta = null;

        modeloTablaPrestamos.setRowCount(0);// Eliminamos los registros de la tabla para no duplicar datos al recuperarlos

        try {
            //Se establece la conexi√≥n
            Statement statement = Conexion.getConexion().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); //Devuelve el puntero de la BD y crea una zona de trabajo donde se puede colocar dentro la consulta

            //FILTRO CODIGO SOCIO && CODIGO MATERIAL && DNI 
            if (cod_socio.isEmpty()==false && cod_material.isEmpty()==false && dni.isEmpty()==false) {
//                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
//                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
//                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE PRESTAMO_MATERIAL.DEVUELTO=0";
                consulta="SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE NUM_SOCIO = "+cod_socio+" AND CODIGO_MATERIAL ="+cod_material+" AND DNI='"+dni+"' AND DEVUELTO=0";
           
                System.out.println(consulta);
            }

            //FILTRO CODIGO SOCIO && CODIGO MATERIAL
            if (dni.isEmpty() && cod_socio.isEmpty()==false && cod_material.isEmpty()==false) {
//                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
//                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
//                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE NUM_SOCIO = "+cod_socio+" AND CODIGO_MATERIAL ="+cod_material+" AND DEVUELTO=0";
                           consulta="SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE NUM_SOCIO = "+cod_socio+" AND CODIGO_MATERIAL ="+cod_material+" AND DEVUELTO=0";

                System.out.println(consulta);
            }

            //FILTRO CODIGO SOCIO
            if (cod_material.isEmpty()&&dni.isEmpty() && cod_socio.isEmpty()==false) {
//                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
//                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
//                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE SOCIO.NUM_SOCIO LIKE '%"+cod_socio+"%' AND PRESTAMO_MATERIAL.DEVUELTO=0";
                    consulta="SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE NUM_SOCIO = "+cod_socio+" AND DEVUELTO=0";

                System.out.println(consulta);
            }
            
            //FILTRO CODIGO SOCIO && DNI
            if (cod_material.isEmpty() && cod_socio.isEmpty()==false && dni.isEmpty()==false) {
//                consulta ="SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n" +
//                                "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n" +
//                                "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE DNI="+dni+" AND SOCIO.NUM_SOCIO LIKE '%"+cod_socio+"%' AND PRESTAMO_MATERIAL.DEVUELTO=0";
                    consulta="SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE NUM_SOCIO = "+cod_socio+" AND DNI ='"+dni+"' AND DEVUELTO=0";

                System.out.println(consulta);
            }
 
            //FILTRO CODIGO MATERIAL
            if (cod_socio.isEmpty() && dni.isEmpty() && cod_material.isEmpty()==false) {
//                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n"
//                        + "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n"
//                        + "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE PRESTAMO_MATERIAL.CODIGO_MATERIAL LIKE '%" + cod_material + "' AND PRESTAMO_MATERIAL.DEVUELTO=0";
                
                consulta="SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE CODIGO = "+cod_material+"  AND DEVUELTO=0";

                System.out.println(consulta);
            }

            //FILTRO CODIGO MATERIAL && dni
            if (cod_socio.isEmpty() && dni.isEmpty() == false && cod_material.isEmpty() == false) {
//                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n"
//                        + "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n"
//                        + "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE DNI=" + dni + " AND PRESTAMO_MATERIAL.CODIGO_MATERIAL LIKE '%" + cod_material + "%' AND PRESTAMO_MATERIAL.DEVUELTO=0";
                consulta = "SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE CODIGO = " + cod_material + " AND DNI ='" + dni + "' AND DEVUELTO=0";

                System.out.println(consulta);
            }

//            
//            //FILTRO DNI
//
            if (cod_socio.isEmpty() && cod_material.isEmpty() && dni.isEmpty() == false) {
//                consulta = "SELECT PRESTAMO_MATERIAL.ID_PRESTAMO, SOCIO.NUM_SOCIO, MATERIAL.CODIGO, PRESTAMO_MATERIAL.FECHA_PRESTAMO, PRESTAMO_MATERIAL.FECHA_LIMITE_DEVOLUCION, PRESTAMO_MATERIAL.FECHA_DEVOLUCION, PRESTAMO_MATERIAL.DEVUELTO \n"
//                        + "FROM SOCIO INNER JOIN PRESTAMO_MATERIAL ON SOCIO.NUM_SOCIO=PRESTAMO_MATERIAL.NUM_SOCIO\n"
//                        + "INNER JOIN MATERIAL ON MATERIAL.CODIGO=PRESTAMO_MATERIAL.CODIGO_MATERIAL WHERE DNI="+ dni + " AND PRESTAMO_MATERIAL.DEVUELTO=0";
                consulta = "SELECT ID_PRESTAMO, NUM_SOCIO, CODIGO, FECHA_PRESTAMO, FECHA_LIMITE_DEVOLUCION, FECHA_DEVOLUCION, DEVUELTO FROM prestamo WHERE DNI ='" + dni + "' AND DEVUELTO=0";

                System.out.println(consulta);
            }

            if (consulta != null) {

                ResultSet resultSet = statement.executeQuery(consulta); //Ejecuta la consulta
                
                  //Creamos una variable que recoja el n√∫mero de filas del resultado del rs
                int filas = resultSet.getRow();

                //Lanzamos un mensaje de aviso
                if (filas == 0 && resultSet.next() == false) {
                    System.out.println(filas);
                    JOptionPane.showMessageDialog(this, "No hay ning√∫n pr√©stamo que cumpla con esos par√°metros");
                    return;
                }

                //Nos ponemos antes del primero
                resultSet.beforeFirst();
                

                while (resultSet.next()) { //Recorrer fila a fila mientras existan datos

                //Se declaran variables para ir recuperando cada campo(columna) dependiento del tipo de dato de la BD
                int id_prestamo = resultSet.getInt(1);
                int codigo_socio = resultSet.getInt(2); //Primera columna
                int codigo_material= resultSet.getInt(3);              
                String fecha_prestamo = resultSet.getString(4);
                String fecha_limite = resultSet.getString(5);
                String fecha_devolucion = resultSet.getString(6);      
                boolean devuelto = resultSet.getBoolean(7);  
                                        
         
                //Creo nuevo prestamo
                Prestamo prestamo= new Prestamo(id_prestamo, codigo_material, codigo_socio, fecha_prestamo, fecha_limite, fecha_devolucion, devuelto);

                 //Recogemos la fecha actual del sistema
               LocalDate fechaActual = LocalDate.now();
              
               
                
             //Se crean la variable de fecha local de la fecha de fin para poder calcular con ella
           
            LocalDate fechaFin = LocalDate.parse(fecha_limite);
             String dias_restantesS="";
            
            //Contamos los d√≠as que hay desde la fecha actual hasta la fecha de finalizaci√≥n del pr√©stamo
                
              long dias = DAYS.between(fechaActual, fechaFin);
              
              
              //Si los d√≠as restantes son negativos significa que ya acab√≥ el tiempo del pr√©stamo e introducimos eso en la columna
               if(dias<-1){
                  dias_restantesS="LLeva "+-dias+" d√≠as de retraso";                 
               
               } else if(dias<0){
                  dias_restantesS="Lleva "+-dias+" d√≠a de retraso";                 
               
               } else {                   
                dias_restantesS= valueOf(dias);
               }
               
               
                //Meto en el modelo                
                modeloTablaPrestamos.setRowCount(modeloTablaPrestamos.getRowCount() + 1);

                //A√±adir objeto completo en la primera celda
                modeloTablaPrestamos.setValueAt(prestamo, modeloTablaPrestamos.getRowCount() - 1, 0);

                //Llenamos las diferentes columnas                                
                modeloTablaPrestamos.setValueAt(prestamo.getNum_socio(), modeloTablaPrestamos.getRowCount() - 1, 1);
                modeloTablaPrestamos.setValueAt(prestamo.getCodigo_material(), modeloTablaPrestamos.getRowCount() - 1, 2);
                modeloTablaPrestamos.setValueAt(prestamo.getFecha_prestamo(), modeloTablaPrestamos.getRowCount() - 1, 3);
                modeloTablaPrestamos.setValueAt(dias_restantesS, modeloTablaPrestamos.getRowCount() - 1, 4);
                modeloTablaPrestamos.setValueAt(prestamo.isDevuelto(), modeloTablaPrestamos.getRowCount() - 1, 5);
               
            }
            } else {
                recargarTabla();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error filtrando en la tabla");
            e.printStackTrace();
        }
        

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgPrestamos dialog = new DlgPrestamos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollTabla;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnDevolver;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem mnuiInformeMaterial;
    private javax.swing.JPopupMenu popMnuInformes;
    private javax.swing.JTable tblPrestamos;
    private javax.swing.JTextField txtCodMaterial;
    private javax.swing.JTextField txtCodSocio;
    private javax.swing.JTextField txtDni;
    // End of variables declaration//GEN-END:variables
    public static DefaultTableModel modeloTablaPrestamos;
}
