/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package codigo;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import javax.swing.JTextField;
import java.sql.*;
import java.util.Base64;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author bea
 */
public class DlgNuevoMaterial extends javax.swing.JDialog {
    //Se crean las variables para recoger la ruta absoluta en el método de elegir imagen. 
    // Se crean en la clase para que cuando sea null en la consulta del insert no se inserte nada

    String ruta = null;
    File fichero = null;
 //Establecemos color de fondo
        Color fondo= new Color(222, 237, 215 );
    /**
     * Creates new form DlgNuevoSocio
     */
    public DlgNuevoMaterial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //Cambiar icono de la barra (no se ve en linux pero si en windows
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Logo.png")).getImage());
        
                //Pinta el formulario
        this.getContentPane().setBackground(fondo);
        
                //Centramos la ventana
        this.setLocationRelativeTo(null);
        
        //Declaración combo box:
        modeloCategoria = new DefaultComboBoxModel<>();

        //Ligar combo box al modelo:
        cmbCategoria.setModel(modeloCategoria);

        //Añadimos elementos al combo
        modeloCategoria.addElement("MONTAÑA");
        modeloCategoria.addElement("ESCALADA");
        modeloCategoria.addElement("CARRERAS");
        modeloCategoria.addElement("OTROS");
        
        txtAreaDescripcion.setLineWrap(true); // Añadir saltos de  línea al área de texto
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblNombre = new javax.swing.JLabel();
        lblCategoria = new javax.swing.JLabel();
        lblUdsDisponibles = new javax.swing.JLabel();
        lblFechaCompra = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtUdsDisponibles = new javax.swing.JTextField();
        dateFechaCompra = new com.toedter.calendar.JDateChooser();
        lblDescripcion = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaDescripcion = new javax.swing.JTextArea();
        cmbCategoria = new javax.swing.JComboBox<>();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NUEVO MATERIAL");
        setBackground(new java.awt.Color(222, 237, 215));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblNombre.setText("NOMBRE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 10, 10);
        getContentPane().add(lblNombre, gridBagConstraints);

        lblCategoria.setText("CATEGORIA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblCategoria, gridBagConstraints);

        lblUdsDisponibles.setText("UNIDADES DISPONIBLES");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblUdsDisponibles, gridBagConstraints);

        lblFechaCompra.setText("FECHA COMPRA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblFechaCompra, gridBagConstraints);

        txtNombre.setMinimumSize(new java.awt.Dimension(101, 24));
        txtNombre.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 10, 10);
        getContentPane().add(txtNombre, gridBagConstraints);

        txtUdsDisponibles.setMinimumSize(new java.awt.Dimension(101, 24));
        txtUdsDisponibles.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(txtUdsDisponibles, gridBagConstraints);

        dateFechaCompra.setDateFormatString("yyyy-MM-dd");
        dateFechaCompra.setPreferredSize(new java.awt.Dimension(101, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(dateFechaCompra, gridBagConstraints);

        lblDescripcion.setText("DESCRIPCION");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(lblDescripcion, gridBagConstraints);

        btnGuardar.setText("GUARDAR");
        btnGuardar.setMaximumSize(new java.awt.Dimension(109, 35));
        btnGuardar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnGuardar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 25, 8);
        getContentPane().add(btnGuardar, gridBagConstraints);

        btnCancelar.setText("CANCELAR");
        btnCancelar.setMaximumSize(new java.awt.Dimension(109, 35));
        btnCancelar.setMinimumSize(new java.awt.Dimension(109, 35));
        btnCancelar.setPreferredSize(new java.awt.Dimension(109, 35));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 25, 8);
        getContentPane().add(btnCancelar, gridBagConstraints);

        txtAreaDescripcion.setColumns(20);
        txtAreaDescripcion.setRows(5);
        jScrollPane1.setViewportView(txtAreaDescripcion);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MONTAÑA", "ESCALADA", "CARRERAS", "OTROS" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 10, 10);
        getContentPane().add(cmbCategoria, gridBagConstraints);

        lblImagen.setBackground(new java.awt.Color(186, 222, 65));
        lblImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagen (2).png"))); // NOI18N
        lblImagen.setToolTipText("Doble click para añadir imagen");
        lblImagen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        lblImagen.setMaximumSize(new java.awt.Dimension(200, 250));
        lblImagen.setMinimumSize(new java.awt.Dimension(200, 250));
        lblImagen.setOpaque(true);
        lblImagen.setPreferredSize(new java.awt.Dimension(200, 250));
        lblImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImagenMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(lblImagen, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

        boolean verificarFecha(){
        java.util.Date dat = new java.util.Date();
        if(dateFechaCompra.getDate().getTime()<=dat.getTime()){
            return true;
        }
        return false;
    }
        
    private boolean existeMaterial(String nombre, String categoria) {
        //Metodo para comprobar que el dni no exista en la base de datos cuando damos de alta un nuevo socio

        String nombreMaterial = "";
        String categoriaMaterial = "";

        try {
            //Crear un statement. Statement significa que en la conexion que tengo abierta me cree una zona de trabajo 
            Statement stmt = Conexion.getConexion().createStatement();
            //Generamos la consulta como en SQL PARA UN SELECT
            String consulta = "SELECT nombre, categoria FROM MATERIAL WHERE NOMBRE='" + nombre + "'AND CATEGORIA='" + categoria + "'";
            //Sacamos por pantalla la consulta para ver posibles errores
            System.out.println(consulta);
            //Para lanzar la consulta SELECT
            ResultSet rs = stmt.executeQuery(consulta);

            while (rs.next()) {
                nombreMaterial = rs.getString(1); //rs.getString devuelve un entero; hay que indicar el número de columna
                categoriaMaterial = rs.getString(2);

            }

        } catch (SQLException e1) {
            e1.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error recuperando datos de usuario");

        }
        if (nombre.equals(nombreMaterial) && categoria.equals(categoriaMaterial)) {
            return true;

        } else {
            return false;
        }

    }

    public static String encodeToString(BufferedImage image) {
//        String imageString = null; //Se crea la variable para guardar como string la foto una vez se convierta a texto
        //Se instancia para almacenar la salida de datos en bytes
        ByteArrayOutputStream bos = new ByteArrayOutputStream();

        //Se declara la variable para guardar en bytes la imagen una vez que se codifique
        byte[] imageEncode = null;

        try {
            //Lee las imagenes con las diferentes extensiones 
            ImageIO.write(image, "jpg", bos);
            ImageIO.write(image, "png", bos);
            ImageIO.write(image, "gif", bos);
            byte[] imageBytes = bos.toByteArray();

            Base64.Encoder encoder = Base64.getEncoder();
            //Se codifica la imagen 
            imageEncode = encoder.encode(imageBytes);

            bos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        //Devuelve la codificación de la imagen en un string para poder guardarlo en la base de datos como un texto largo
        return new String(imageEncode);
    }

    private void elegirImagen() {

        //Se crea para poder elegir un archivo del pc
        JFileChooser elegirImagen = new JFileChooser();

        //Se filtra para que solo se puedan seleccionar archivos de tipo imagen
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("JPG, PNG & GIF", "jpg", "png", "gif");

        //Se le asigna el filtrado al file chooser
        elegirImagen.setFileFilter(filtro);

        //Se obtiene el valor del botón que se selecciona -> 1 abrir, 0 cancelar
        int resultado = elegirImagen.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            //Se guarda la imagen seleccionada como un fichero
            fichero = elegirImagen.getSelectedFile();
            //Se guarda en la variable ruta la ruta del elemento seleccionado
            ruta = fichero.getAbsolutePath();

            //Se instancia la imagen y se recoge dicha imagen de la ruta
            ImageIcon imagenMaterial = new ImageIcon(fichero.toString());

            //Se pasa la imagen a icon y se eligen las dimensiones de dicha imagen
            Icon iconMaterial = new ImageIcon(imagenMaterial.getImage().getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH));

            //Se introduce la imagen dentro de la etiqueta
            lblImagen.setIcon(iconMaterial);
        }
    }
    

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        //Recuperamos los valores de las cajas de texto y del campo para fechas.

        String nombre = txtNombre.getText().trim();
        String unidades_disponiblesS = txtUdsDisponibles.getText().trim();
        String fecha_compra = ((JTextField) dateFechaCompra.getDateEditor().getUiComponent()).getText();
        String descripcion = txtAreaDescripcion.getText().trim();

        //índice del combo
        int indice = cmbCategoria.getSelectedIndex();
        String categoria = modeloCategoria.getElementAt(indice);

        String image_string=null;
        
        if(ruta !=null){
            
        
        try{
            //Se guarda el fichero de la imagen en un buffer
         BufferedImage img = ImageIO.read(new File(fichero.toString()));
         //Se codifica la imagen a texto utilizando el método 
         image_string = encodeToString(img);  
        }catch(IOException e){
            e.printStackTrace();
        }
        }

        try {

            //Validaciones
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Campo nombre obligatorio");
                return;
            }

            if (fecha_compra.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debes indicar la fecha de compra");
                return;
            }

            int unidades_disponibles = 0;

            try {
                unidades_disponibles = Integer.parseInt(unidades_disponiblesS);

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Las unidades deben ser un número entero");
            }

            if (unidades_disponibles < 0) {
                JOptionPane.showMessageDialog(this, "Las unidades deben ser superiores a 1.");
                return;
            }

            if (existeMaterial(nombre, categoria)) {
                JOptionPane.showMessageDialog(this, "Ya existe el material");
            } else if (verificarFecha()==false){
                JOptionPane.showMessageDialog(this, "La fecha de compra no puede ser superior al día de hoy");
            }else {
                //Crear un statement. Statement significa que en la conexion que tengo abierta me cree una zona de trabajo 
                Statement statement = Conexion.getConexion().createStatement();
                //Generamos la consulta como en SQL para insertar los datos del nuevo socio en la base de datos
                String consulta = "INSERT INTO MATERIAL (NOMBRE, CATEGORIA, DESCRIPCION, IMAGEN, UNIDADES, FECHA_COMPRA) VALUES ('" + nombre + "', '" + categoria + "','" + descripcion + "', '" + image_string + "','" + unidades_disponibles + "','" + fecha_compra + "')";
                //Imprimimos por pantalla
                System.out.println(consulta);
                statement.executeUpdate(consulta);

                JOptionPane.showMessageDialog(this, "Material guardado correctamente");

                limpiar();
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error insertando datos");

        }


    }//GEN-LAST:event_btnGuardarActionPerformed

    private void lblImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImagenMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            elegirImagen();
        }
    }//GEN-LAST:event_lblImagenMouseClicked
    private void limpiar() {
        txtNombre.setText("");
        int indice = cmbCategoria.getSelectedIndex();
        cmbCategoria.setSelectedItem(1);
        txtAreaDescripcion.setText("");
        txtUdsDisponibles.setText("");
        dateFechaCompra.setDate(null);
        
        ruta=null;
        fichero=null;
        lblImagen.setIcon(null);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgNuevoMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgNuevoMaterial dialog = new DlgNuevoMaterial(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cmbCategoria;
    private com.toedter.calendar.JDateChooser dateFechaCompra;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblFechaCompra;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblUdsDisponibles;
    private javax.swing.JTextArea txtAreaDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtUdsDisponibles;
    // End of variables declaration//GEN-END:variables
    private DefaultComboBoxModel<String> modeloCategoria;
}
